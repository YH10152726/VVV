Option Explicit

Private Type PreviewProcessItem
    ProcessName As String
    Supplier As String
    MaeDandoriTime As String
    YujinTime As String
    MachineTime As String
    GoDandoriTime As String
    Bikou As String
End Type

Private m_arrPreviewProcesses() As PreviewProcessItem ' プレビュー工程を格納する動的配列
Private m_lPreviewProcessCount As Long              ' m_arrPreviewProcesses内の有効な工程数

' === モジュールレベル定数 ===
Private Const SHEET_KOUTEIHYO As String = "工程表"
Private Const SHEET_KOUTEI_TIMES As String = "シート2" ' ★工数・材質・外注先情報管理シート名

' 入力列 (工程表シート)
Private Const COL_Z_INPUT As Long = 26      ' Z列：コーティング or サブゼロ
Private Const COL_AC_INPUT As Long = 29     ' AC列：材質コード
Private Const COL_AD_SIZE_INPUT As Long = 30  ' AD列：サイズ (例: 10*20*30)
Private Const COL_AH_ITEMNAME_INPUT As Long = 34 ' AH列：品名
Private Const COL_Y_REMARKS_INPUT As Long = 25    ' Y列：備考

' 出力列 (工程表シート)
Private Const COL_KOUTEI As Long = 36             ' AJ列: 工程名
Private Const COL_GYOUSHA As Long = 38            ' AL列: 業者
Private Const COL_MAE_DANDORI_OUTPUT As Long = 39 ' AM列: 前段取
Private Const COL_JINKAN_YUJIN As Long = 40       ' AN列: 工数: 有人
Private Const COL_JINKAN_MACHINE As Long = 41     ' AO列: 工数: 機械
Private Const COL_JINKAN_SETUP As Long = 42       ' AP列: 工数: 段取 (後段取)
Private Const COL_BIKOU As Long = 45              ' AS列: 備考

' 工数シート列定義 (シート2) - A列からG列
Private Const COL_TIME_KEY As Long = 1            ' A列: 工程キー
Private Const COL_TIME_MAE_DANDORI As Long = 2    ' B列: 前段取時間
Private Const COL_TIME_YUJIN As Long = 3          ' C列: 有人時間
Private Const COL_TIME_MACHINE As Long = 4        ' D列: 機械時間
Private Const COL_TIME_SETUP As Long = 5          ' E列: 段取時間 (後段取)
Private Const COL_TIME_REMARKS As Long = 6        ' F列: 備考 (シート2の一般的な備考、これが工程表AS列へ)
Private Const COL_TIME_REMARKS_DETAIL As Long = 7 ' G列: 詳細備考 (ユーザー確認用)

' 材質情報シート列定義 (シート2) - J列からM列
Private Const COL_MATERIAL_CODE As Long = 10      ' J列: 材質コード (キー)
Private Const COL_MATERIAL_SUPPLIER As Long = 11  ' K列: 主材購入先
Private Const COL_MATERIAL_HEAT_NORMAL As Long = 12 ' L列: 熱処理先 (サブゼロなし)
Private Const COL_MATERIAL_HEAT_SUBZERO As Long = 13 ' M列: 熱処理先 (サブゼロあり)

' ★外注先情報シート列定義 (シート2) - O列からP列
Private Const COL_OUTSOURCE_KEY As Long = 15      ' O列: 外注先管理キー
Private Const COL_OUTSOURCE_NAME As Long = 16     ' P列: 外注先名


' === モジュールレベル変数 ===
Private processTimesDict As Object ' 工程別工数・備考格納用Dictionary
Private materialInfoDict As Object ' 材質情報格納用Dictionary
Private outsourcingInfoDict As Object ' ★外注先情報格納用Dictionary

Private Sub cmdDeletePreviewItem_Click()
    Dim lSelectedIndex As Long
    Dim lArrayIndexToDelete As Long
    Dim i As Long

    lSelectedIndex = Me.ListBoxPreview.ListIndex

    ' アイテムが選択されているか、ヘッダー行(インデックス0)でないかを確認
    If lSelectedIndex < 1 Then ' -1 (未選択) または 0 (ヘッダー行) の場合は処理しない
        MsgBox "削除する工程をプレビューリストから選択してください（ヘッダー行以外）。", vbInformation
        Exit Sub
    End If

    ' ListBoxのインデックスを配列のインデックスに変換 (ヘッダー行の分を引く)
    lArrayIndexToDelete = lSelectedIndex - 1

    ' 念のため、変換後の配列インデックスが有効な範囲内か確認
    If lArrayIndexToDelete < 0 Or lArrayIndexToDelete >= m_lPreviewProcessCount Then
        MsgBox "内部エラー: 選択されたインデックスが配列の範囲外です。処理を中断します。", vbCritical
        Exit Sub
    End If

    ' ユーザーに削除の最終確認
    If MsgBox("選択された工程「" & m_arrPreviewProcesses(lArrayIndexToDelete).ProcessName & "」をプレビューから削除しますか？", _
              vbYesNo + vbQuestion, "削除の確認") = vbNo Then
        Exit Sub '「いいえ」が選択されたら何もしない
    End If

    ' 配列から要素を削除 (指定されたインデックス以降の要素を一つ前に詰める)
    If m_lPreviewProcessCount > 0 Then ' 配列に要素がある場合のみ処理
        For i = lArrayIndexToDelete To m_lPreviewProcessCount - 2 ' 配列の末尾の一つ手前までループ
            m_arrPreviewProcesses(i) = m_arrPreviewProcesses(i + 1)
        Next i
        
        m_lPreviewProcessCount = m_lPreviewProcessCount - 1 ' 有効な要素数を1減らす
        
        ' 配列の最後の要素だった場所をクリア（任意ですが、念のため）
        If m_lPreviewProcessCount >= 0 And m_lPreviewProcessCount <= UBound(m_arrPreviewProcesses) Then
             ' 型の各要素を初期化 (文字列なら空文字、数値なら0など)
             m_arrPreviewProcesses(m_lPreviewProcessCount).ProcessName = ""
             m_arrPreviewProcesses(m_lPreviewProcessCount).Supplier = ""
             m_arrPreviewProcesses(m_lPreviewProcessCount).MaeDandoriTime = ""
             m_arrPreviewProcesses(m_lPreviewProcessCount).YujinTime = ""
             m_arrPreviewProcesses(m_lPreviewProcessCount).MachineTime = ""
             m_arrPreviewProcesses(m_lPreviewProcessCount).GoDandoriTime = ""
             m_arrPreviewProcesses(m_lPreviewProcessCount).Bikou = ""
        End If

        ' オプション：配列サイズを動的に縮小する場合 (要素数が大幅に減った場合など)
        ' 今回は毎回縮小はせず、UpdatePreview時のReDimで調整される形でも問題ありません。
        ' もし縮小するなら、例えば以下のような条件で。
        ' If UBound(m_arrPreviewProcesses) > m_lPreviewProcessCount + 10 Then ' 空きが10個以上できたら
        '    If m_lPreviewProcessCount > 0 Then
        '        ReDim Preserve m_arrPreviewProcesses(0 To m_lPreviewProcessCount - 1)
        '    ElseIf m_lPreviewProcessCount = 0 Then ' 全て削除された場合
        '        Erase m_arrPreviewProcesses
        '        ReDim m_arrPreviewProcesses(0 To 49) ' 初期サイズに戻す
        '    End If
        ' End If
    End If

    ' リストボックスの表示を更新
    Call RefreshListBoxFromInternalArray

    ' 削除後、可能であれば近くのアイテムを選択状態にする
    If m_lPreviewProcessCount > 0 Then ' まだデータが残っていれば
        If lSelectedIndex <= Me.ListBoxPreview.ListCount - 1 Then ' 削除した位置に次のアイテムがある場合
            Me.ListBoxPreview.ListIndex = lSelectedIndex
        ElseIf lSelectedIndex - 1 >= 1 Then ' 削除したのが末尾で、その前にアイテムがある場合 (ヘッダー除く)
             Me.ListBoxPreview.ListIndex = lSelectedIndex - 1
        Else
            ' 残り1行になったが、それはヘッダーかもしれないので選択しない
             Me.ListBoxPreview.ListIndex = -1
        End If
    Else
         Me.ListBoxPreview.ListIndex = -1 ' データがなくなったら何も選択しない
    End If

    MsgBox "選択された工程をプレビューから削除しました。", vbInformation

End Sub

Private Sub cmdMoveDown_Click()
    Dim lSelectedIndex As Long
    Dim tempItem As PreviewProcessItem

    ' リストボックスでアイテムが選択されているか確認
    lSelectedIndex = Me.ListBoxPreview.ListIndex
    If lSelectedIndex = -1 Then
        MsgBox "移動する工程をリストから選択してください。", vbInformation
        Exit Sub
    End If

    ' ヘッダー行(0) は対象外、データ行は1から ListCount-1 まで
    If lSelectedIndex < 1 Or lSelectedIndex >= (Me.ListBoxPreview.ListCount - 1) Then
        MsgBox "これ以上、下には移動できません。", vbInformation
        Exit Sub
    End If

    ' ListBoxのインデックスはヘッダー行を含むため、配列のインデックスに変換 (ヘッダー分 -1)
    ' 移動対象は選択されたアイテムなので、その配列インデックスは (lSelectedIndex - 1)
    ' その一つ下と入れ替えるので、(lSelectedIndex - 1) と (lSelectedIndex) を入れ替える
    Dim lArrayIndexToMove As Long
    lArrayIndexToMove = lSelectedIndex - 1 ' 配列内での選択アイテムのインデックス

    If lArrayIndexToMove < 0 Or lArrayIndexToMove >= m_lPreviewProcessCount Then ' 念のため範囲チェック
        MsgBox "選択されたインデックスが不正です。", vbExclamation
        Exit Sub
    End If
    If (lArrayIndexToMove + 1) >= m_lPreviewProcessCount Then ' さらに念のため下に移動できるかチェック
         MsgBox "配列インデックスエラー（下）。", vbExclamation
         Exit Sub
    End If

    ' 配列内でアイテムを入れ替え
    tempItem = m_arrPreviewProcesses(lArrayIndexToMove)
    m_arrPreviewProcesses(lArrayIndexToMove) = m_arrPreviewProcesses(lArrayIndexToMove + 1)
    m_arrPreviewProcesses(lArrayIndexToMove + 1) = tempItem

    ' リストボックスの表示を更新
    Call RefreshListBoxFromInternalArray

    ' 移動後も同じアイテムが選択された状態にする (一つ下に移動したのでインデックスは +1)
    If (lSelectedIndex + 1) < Me.ListBoxPreview.ListCount Then
      Me.ListBoxPreview.Selected(lSelectedIndex + 1) = True
    End If

End Sub

Private Sub cmdMoveUp_Click()
    Dim lSelectedIndex As Long
    Dim tempItem As PreviewProcessItem

    ' リストボックスでアイテムが選択されているか確認
    lSelectedIndex = Me.ListBoxPreview.ListIndex
    If lSelectedIndex = -1 Then
        MsgBox "移動する工程をリストから選択してください。", vbInformation
        Exit Sub
    End If

    ' ヘッダー行(0) または 最初のデータ行(1) が選択されている場合は上に移動できない
    If lSelectedIndex <= 1 Then ' ヘッダーが0、最初のデータが1
        MsgBox "これ以上、上には移動できません。", vbInformation
        Exit Sub
    End If

    ' ListBoxのインデックスはヘッダー行を含むため、配列のインデックスに変換 (ヘッダー分 -1)
    ' かつ、移動対象は選択されたアイテムなので、その配列インデックスは (lSelectedIndex - 1)
    ' その一つ上と入れ替えるので、(lSelectedIndex - 1) と (lSelectedIndex - 2) を入れ替える
    Dim lArrayIndexToMove As Long
    lArrayIndexToMove = lSelectedIndex - 1 ' 配列内での選択アイテムのインデックス

    If lArrayIndexToMove < 0 Or lArrayIndexToMove >= m_lPreviewProcessCount Then ' 念のため範囲チェック
        MsgBox "選択されたインデックスが不正です。", vbExclamation
        Exit Sub
    End If
    If (lArrayIndexToMove - 1) < 0 Then ' さらに念のため上に移動できるかチェック
         MsgBox "配列インデックスエラー（上）。", vbExclamation
         Exit Sub
    End If


    ' 配列内でアイテムを入れ替え
    tempItem = m_arrPreviewProcesses(lArrayIndexToMove)
    m_arrPreviewProcesses(lArrayIndexToMove) = m_arrPreviewProcesses(lArrayIndexToMove - 1)
    m_arrPreviewProcesses(lArrayIndexToMove - 1) = tempItem

    ' リストボックスの表示を更新
    Call RefreshListBoxFromInternalArray

    ' 移動後も同じアイテムが選択された状態にする (一つ上に移動したのでインデックスは -1)
    If (lSelectedIndex - 1) < Me.ListBoxPreview.ListCount And (lSelectedIndex - 1) >= 1 Then ' ヘッダー行は選択させない
      Me.ListBoxPreview.Selected(lSelectedIndex - 1) = True
    End If

End Sub

' === ユーザーフォーム初期化 ===
Private Sub UserForm_Initialize()
    Dim i As Integer

    ' --- リストボックスの初期設定 (ListBoxPreview という名前のリストボックスを想定) ---
    With Me.ListBoxPreview
        .Clear
        .ColumnCount = 7 ' 工程名, 業者, 前段取, 有人, 機械, 後段取, 備考
        .ColumnWidths = "110;70;40;40;40;40;120" ' 各列の幅を適宜調整
        ' ヘッダー行の追加
        .AddItem "工程名"
        .List(.ListCount - 1, 1) = "業者"
        .List(.ListCount - 1, 2) = "前段取"
        .List(.ListCount - 1, 3) = "有人"
        .List(.ListCount - 1, 4) = "機械"
        .List(.ListCount - 1, 5) = "後段取"
        .List(.ListCount - 1, 6) = "備考"
    End With

    ' --- 既存のデータ読み込み処理 ---
    Call LoadProcessTimes
    Call LoadMaterialInfo
    Call LoadOutsourcingInfo

    ' --- データ読み込みエラーチェック (既存のものを流用) ---
    If processTimesDict Is Nothing Or materialInfoDict Is Nothing Or outsourcingInfoDict Is Nothing Then
        MsgBox "データ読み込みに失敗しました。処理を中断します。", vbCritical
        Unload Me
        Exit Sub
    ElseIf processTimesDict.Count = 0 And materialInfoDict.Count = 0 And outsourcingInfoDict.Count = 0 Then
        MsgBox "工数、材質、および外注先データがシート「" & SHEET_KOUTEI_TIMES & "」に登録されていません。", vbExclamation
    ElseIf processTimesDict.Count = 0 Then
        MsgBox "工数データがシート「" & SHEET_KOUTEI_TIMES & "」のA-G列に登録されていません。", vbExclamation
    ElseIf materialInfoDict.Count = 0 Then
        MsgBox "材質データがシート「" & SHEET_KOUTEI_TIMES & "」のJ-M列に登録されていません。", vbExclamation
    ElseIf outsourcingInfoDict.Count = 0 Then
        MsgBox "外注先データがシート「" & SHEET_KOUTEI_TIMES & "」のO-P列に登録されていません。", vbExclamation
    End If

    ' --- 既存のコンボボックス等初期化処理 (主要なもののみ抜粋) ---
    With Me.ComboBox工程選択
        .AddItem "調整 面取": .AddItem "調整（P）": .AddItem "電極設計"
        .AddItem "確認測定M": .AddItem "確認測定P": .AddItem "穴あけタップ"
        .AddItem "倣い研削": .AddItem "平面研削 汎用": .AddItem "平面研削 汎用（M調整）"
        .AddItem "熱処理": .AddItem "社内TRY": .AddItem "主材購入": .AddItem "M/C-1"
        .AddItem "M/C-2": .AddItem "M/C（大）": .AddItem "M/C（電極）": .AddItem "M/C（小）"
        .AddItem "平面研削-1": .AddItem "平面研削-2": .AddItem "平面研削-3": .AddItem "外注"
        .AddItem "洗浄": .AddItem "細穴放電加工": .AddItem "副材（購入品）": .AddItem "磨き"
        .AddItem "型彫放電加工": .AddItem "ワイヤ放電加工": .AddItem "ワイヤ加工（電極）"
        .AddItem "溶接": .AddItem "平面研削 NC": .AddItem "電極リスト作成"
    End With
    Me.CheckBoxGeibi.Caption = "ゲイビ鋼業に外注する": Me.CheckBoxGeibi.Value = False
    With Me.ComboBoxGeibiType
        .AddItem "材料～焼きまで": .AddItem "荒加工のみ": .AddItem "荒～焼きまで": .ListIndex = 0
    End With
    With Me.ComboBox2 ' 外注先 (CheckBox9がTrueの時に使用)
        .AddItem "細井工作所": .AddItem "ﾊﾟﾝﾁ工業": .AddItem "四変ﾃｯｸ": .AddItem "ﾄｰｶﾛｲ": .ListIndex = 0
        .Enabled = False ' 初期状態は無効
    End With
    With Me.ComboBox3 ' 追加加工名 (CheckBox7 & CheckBox8がTrueの時に使用)
        .AddItem "平面研削 汎用": .AddItem "平面研削 NC": .AddItem "倣い研削": .AddItem "M/C（小）"
        .AddItem "M/C（大）": .AddItem "ﾜｲﾔ放電加工": .AddItem "型彫り放電": .ListIndex = 0
        .Enabled = False ' 初期状態は無効
    End With
    With Me.ComboBoxTsubaCount
         .AddItem "1": .AddItem "2": .AddItem "3": .ListIndex = 0
         .Enabled = False
    End With
    With Me.ComboBoxTsubaRough
         .AddItem "MC（小）": .AddItem "ﾜｲﾔ放電加工": .ListIndex = 0
         .Enabled = False
    End With


    If TypeName(Me.Controls("CheckBoxKatabori")) = "CheckBox" Then Me.CheckBoxKatabori.Value = False
    If TypeName(Me.Controls("CheckBoxNaraiKensaku")) = "CheckBox" Then Me.CheckBoxNaraiKensaku.Value = False
    If TypeName(Me.Controls("CheckBoxSingleMCPreHeat")) = "CheckBox" Then Me.CheckBoxSingleMCPreHeat.Value = False
    If TypeName(Me.Controls("CheckBoxTripleMCPreHeat")) = "CheckBox" Then Me.CheckBoxTripleMCPreHeat.Value = False

    If TypeName(Me.Controls("CheckBoxAutoSgCount")) = "CheckBox" Then
        Me.CheckBoxAutoSgCount.Caption = "SG回数を自動で決定する"
        Me.CheckBoxAutoSgCount.Value = True
    End If
    If TypeName(Me.Controls("ComboBoxSgCount")) = "ComboBox" Then
        With Me.ComboBoxSgCount
            .Clear
            For i = 1 To 6
                .AddItem CStr(i)
            Next i
            .ListIndex = 2 ' Default to 3 times
            .Enabled = False
        End With
    End If

    ' --- プレビュー用の一時入力フィールドの初期値設定 (アクティブセルから) ---
    Dim wsInitialize As Worksheet, targetRowInitialize As Long
    Dim ctrl As Object ' 汎用コントロールオブジェクト変数
    Dim txtBox As MSForms.TextBox ' TextBox型変数

    On Error Resume Next ' アクティブシートやセル選択がない場合のエラーを無視
    Set wsInitialize = Nothing
    Set wsInitialize = ThisWorkbook.Sheets(SHEET_KOUTEIHYO)
    On Error GoTo 0 ' エラーハンドリングを元に戻す

    If Not wsInitialize Is Nothing Then
        If TypeName(ActiveSheet) = "Worksheet" Then
            If ActiveSheet.name = wsInitialize.name Then
                If TypeName(Selection) = "Range" Then
                    If Selection.Cells.CountLarge = 1 Then
                        targetRowInitialize = ActiveCell.Row
                        If targetRowInitialize > 0 Then
                            ' --- プレビュー用テキストボックスに値を設定 (より安全な方法) ---
                            ' txtMaterialCodePreview
                            Set ctrl = Nothing: On Error Resume Next: Set ctrl = Me.Controls("txtMaterialCodePreview"): On Error GoTo 0
                            If Not ctrl Is Nothing Then
                                If TypeName(ctrl) = "TextBox" Then
                                    Set txtBox = ctrl
                                    txtBox.Text = Trim(CStr(wsInitialize.Cells(targetRowInitialize, COL_AC_INPUT).Value))
                                    Set txtBox = Nothing
                                End If
                            End If
                            Set ctrl = Nothing
                            
                            ' txtZValuePreview
                            Set ctrl = Nothing: On Error Resume Next: Set ctrl = Me.Controls("txtZValuePreview"): On Error GoTo 0
                            If Not ctrl Is Nothing Then
                                If TypeName(ctrl) = "TextBox" Then
                                    Set txtBox = ctrl
                                    txtBox.Text = Trim(CStr(wsInitialize.Cells(targetRowInitialize, COL_Z_INPUT).Value))
                                    Set txtBox = Nothing
                                End If
                            End If
                            Set ctrl = Nothing

                            ' txtSizePreview
                            Set ctrl = Nothing: On Error Resume Next: Set ctrl = Me.Controls("txtSizePreview"): On Error GoTo 0
                            If Not ctrl Is Nothing Then
                                If TypeName(ctrl) = "TextBox" Then
                                    Set txtBox = ctrl
                                    txtBox.Text = Trim(CStr(wsInitialize.Cells(targetRowInitialize, COL_AD_SIZE_INPUT).Value))
                                    Set txtBox = Nothing
                                End If
                            End If
                            Set ctrl = Nothing
                            
                            ' txtItemNamePreview
                            Set ctrl = Nothing: On Error Resume Next: Set ctrl = Me.Controls("txtItemNamePreview"): On Error GoTo 0
                            If Not ctrl Is Nothing Then
                                If TypeName(ctrl) = "TextBox" Then
                                    Set txtBox = ctrl
                                    txtBox.Text = Trim(CStr(wsInitialize.Cells(targetRowInitialize, COL_AH_ITEMNAME_INPUT).Value))
                                    Set txtBox = Nothing
                                End If
                            End If
                            Set ctrl = Nothing
                            
                            ' txtRemarksPreview
                            Set ctrl = Nothing: On Error Resume Next: Set ctrl = Me.Controls("txtRemarksPreview"): On Error GoTo 0
                            If Not ctrl Is Nothing Then
                                If TypeName(ctrl) = "TextBox" Then
                                    Set txtBox = ctrl
                                    txtBox.Text = Trim(CStr(wsInitialize.Cells(targetRowInitialize, COL_Y_REMARKS_INPUT).Value))
                                    Set txtBox = Nothing
                                End If
                            End If
                            Set ctrl = Nothing

                            ' --- 既存の初期オプション設定ロジック (一部抜粋) ---
                            Dim sizeStrInitialize As String, itemNameInitialize As String, remarksStrInitialize As String
                            Dim isPlateBySizeInitialize As Boolean, containsPInitialize As Boolean, containsLayoutInRemarks As Boolean, containsDoujiInRemarks As Boolean, containsMisumiInRemarks As Boolean

                            ' プレビュー用テキストボックスから値を取得 (存在すれば)
                            Set ctrl = Nothing: On Error Resume Next: Set ctrl = Me.Controls("txtSizePreview"): On Error GoTo 0
                            If Not ctrl Is Nothing And TypeName(ctrl) = "TextBox" Then
                                Set txtBox = ctrl: sizeStrInitialize = txtBox.Text: Set txtBox = Nothing
                            Else
                                sizeStrInitialize = Trim(CStr(wsInitialize.Cells(targetRowInitialize, COL_AD_SIZE_INPUT).Value))
                            End If
                            Set ctrl = Nothing
                            
                            Set ctrl = Nothing: On Error Resume Next: Set ctrl = Me.Controls("txtItemNamePreview"): On Error GoTo 0
                            If Not ctrl Is Nothing And TypeName(ctrl) = "TextBox" Then
                                Set txtBox = ctrl: itemNameInitialize = txtBox.Text: Set txtBox = Nothing
                            Else
                                itemNameInitialize = Trim(CStr(wsInitialize.Cells(targetRowInitialize, COL_AH_ITEMNAME_INPUT).Value))
                            End If
                            Set ctrl = Nothing

                            Set ctrl = Nothing: On Error Resume Next: Set ctrl = Me.Controls("txtRemarksPreview"): On Error GoTo 0
                            If Not ctrl Is Nothing And TypeName(ctrl) = "TextBox" Then
                                Set txtBox = ctrl: remarksStrInitialize = txtBox.Text: Set txtBox = Nothing
                            Else
                                remarksStrInitialize = Trim(CStr(wsInitialize.Cells(targetRowInitialize, COL_Y_REMARKS_INPUT).Value))
                            End If
                            Set ctrl = Nothing


                            isPlateBySizeInitialize = (ClassifyPartBasedOnSizeString(sizeStrInitialize) = "+")
                            containsPInitialize = (InStr(1, UCase(itemNameInitialize), "P", vbTextCompare) > 0)
                            If isPlateBySizeInitialize And containsPInitialize Then If TypeName(Me.Controls("OptionButton5")) = "OptionButton" Then Me.OptionButton5.Value = True
                            
                            containsLayoutInRemarks = (InStr(1, remarksStrInitialize, "ﾚｲｱｳﾄ", vbTextCompare) > 0)
                            If containsLayoutInRemarks Then If TypeName(Me.Controls("OptionButton6")) = "OptionButton" Then Me.OptionButton6.Value = True ' ファミリー加工（レイアウト）
                            
                            containsDoujiInRemarks = (InStr(1, remarksStrInitialize, "同時", vbTextCompare) > 0)
                            If containsDoujiInRemarks Then If TypeName(Me.Controls("CheckBoxLayout")) = "CheckBox" Then Me.CheckBoxLayout.Value = True ' レイアウト切り離し後

                            containsMisumiInRemarks = (InStr(1, remarksStrInitialize, "ミスミ", vbTextCompare) > 0)
                            If containsMisumiInRemarks Then If TypeName(Me.Controls("CheckBox7")) = "CheckBox" Then Me.CheckBox7.Value = True ' ミスミ購入
                        End If
                    End If
                End If
            End If
        End If
    End If

    ' --- オプションボタンのデフォルト選択 (既存のものを流用) ---
    If TypeName(Me.Controls("OptionButton4")) = "OptionButton" And _
       TypeName(Me.Controls("OptionButton5")) = "OptionButton" And _
       TypeName(Me.Controls("OptionButton6")) = "OptionButton" Then
        If Not Me.OptionButton4.Value And Not Me.OptionButton5.Value And Not Me.OptionButton6.Value Then
            Me.OptionButton4.Value = True ' デフォルトで「ブロック」を選択
        End If
    End If
    
    ' ミスミ購入チェックボックスの状態に応じて追加工コンボボックスの有効/無効を初期設定
    If TypeName(Me.Controls("CheckBox7")) = "CheckBox" And TypeName(Me.Controls("ComboBox3")) = "ComboBox" Then
        Me.ComboBox3.Enabled = Me.CheckBox7.Value
    End If
    ' 外作チェックボックスの状態に応じて外注先コンボボックスの有効/無効を初期設定
    If TypeName(Me.Controls("CheckBox9")) = "CheckBox" And TypeName(Me.Controls("ComboBox2")) = "ComboBox" Then
        Me.ComboBox2.Enabled = Me.CheckBox9.Value
    End If
    ' ツバ加工チェックボックスの状態に応じて関連コンボボックスの有効/無効を初期設定
    If TypeName(Me.Controls("CheckBoxTsuba")) = "CheckBox" Then
        Me.ComboBoxTsubaCount.Enabled = Me.CheckBoxTsuba.Value
        Me.ComboBoxTsubaRough.Enabled = Me.CheckBoxTsuba.Value
    End If


    ' --- 初期プレビューの更新 ---
    Call UpdatePreview
End Sub

' === プレビュー更新サブルーチン ===
Private Sub UpdatePreview()
    Dim i As Long ' ★i の宣言はここにあると仮定（なければ元の位置のまま）
    Dim ctrl As Object ' 汎用コントロールオブジェクト変数
    Dim txtBox As MSForms.TextBox ' TextBox型変数

    ' ★★★ ここから修正 ★★★
    ' プレビュー用配列とカウンターを初期化
    m_lPreviewProcessCount = 0
    Erase m_arrPreviewProcesses  ' まず配列を解放します (未割り当ての状態でもエラーになりません)
    ReDim m_arrPreviewProcesses(0 To 49)

    ' ListBoxの内容をクリア (ヘッダー行を除く)
    For i = Me.ListBoxPreview.ListCount - 1 To 1 Step -1
        Me.ListBoxPreview.RemoveItem i
    Next i
    If Me.ListBoxPreview.ListCount = 0 Then
         With Me.ListBoxPreview
            .AddItem "工程名": .List(.ListCount - 1, 1) = "業者": .List(.ListCount - 1, 2) = "前段取"
            .List(.ListCount - 1, 3) = "有人": .List(.ListCount - 1, 4) = "機械": .List(.ListCount - 1, 5) = "後段取"
            .List(.ListCount - 1, 6) = "備考"
        End With
    End If

    ' --- プレビューに必要な入力値を取得 ---
    Dim zValuePreview As String
    Dim materialCodeInputPreview As String
    Dim sizeStrPreview As String

    Set ctrl = Nothing: On Error Resume Next: Set ctrl = Me.Controls("txtMaterialCodePreview"): On Error GoTo 0
    If Not ctrl Is Nothing And TypeName(ctrl) = "TextBox" Then
        Set txtBox = ctrl: materialCodeInputPreview = Trim(txtBox.Text): Set txtBox = Nothing
    Else
        materialCodeInputPreview = "SKD11" ' Default if no textbox
    End If
    Set ctrl = Nothing

    Set ctrl = Nothing: On Error Resume Next: Set ctrl = Me.Controls("txtZValuePreview"): On Error GoTo 0
    If Not ctrl Is Nothing And TypeName(ctrl) = "TextBox" Then
        Set txtBox = ctrl: zValuePreview = Trim(txtBox.Text): Set txtBox = Nothing
    Else
        zValuePreview = ""
    End If
    Set ctrl = Nothing
    
    Set ctrl = Nothing: On Error Resume Next: Set ctrl = Me.Controls("txtSizePreview"): On Error GoTo 0
    If Not ctrl Is Nothing And TypeName(ctrl) = "TextBox" Then
        Set txtBox = ctrl: sizeStrPreview = Trim(txtBox.Text): Set txtBox = Nothing
    Else
        sizeStrPreview = "50*50*50" ' Default size for preview logic if needed
    End If
    Set ctrl = Nothing


    ' --- 既存のCommandButton1_Clickのロジックを模倣してプレビューを生成 ---
    Dim materialCode As String
    Dim coatingTypeKey As String
    Dim hasSubZero As Boolean, needsOutsourcingForCoating As Boolean, needsPolishing As Boolean
    Dim shape As String, useWireEDM As Boolean, isDia10OrLess As Boolean, hasShapeProcessing As Boolean
    Dim hasCuttingEdge As Boolean, isOutsourcedProduct As Boolean, isMisumiPurchase As Boolean
    Dim hasAdditionalProcessing As Boolean, additionalProcessName As String, isLayoutAfterCut As Boolean
    Dim needsAdjustP As Boolean, useAfterMC As Boolean, isGeibiOutsource As Boolean, geibiPattern As String
    Dim hasTsubaProcessing As Boolean, tsubaCount As Integer, tsubaRoughMethod As String
    Dim noChamfer As Boolean, hasLiftingScrew As Boolean, useSmallStartHole As Boolean
    Dim kataboriChoosenByUser As Boolean, naraiKensakuChoosenByUser As Boolean
    Dim isSingleMCPreHeat As Boolean, isTripleMCPreHeat As Boolean
    Dim autoSgCountValue As Boolean, userSgCountValue As Integer

    ' --- フォームの状態を取得 ---
    materialCode = GetMaterialName(materialCodeInputPreview)
    If materialCode = "" And materialCodeInputPreview <> "" Then
         Call AddItemToPreviewList("エラー: 材質コード不正", materialCodeInputPreview, "", "", "", "", "シート2のJ列確認")
         Exit Sub
    End If
    If materialCode = "" Then materialCode = "SKD11" ' フォールバック材質 (プレビュー用)

    Call ParseZColumnInfo(zValuePreview, coatingTypeKey, hasSubZero, needsOutsourcingForCoating, needsPolishing)

    isGeibiOutsource = Me.CheckBoxGeibi.Value
    If isGeibiOutsource Then geibiPattern = Me.ComboBoxGeibiType.Value
    shape = GetShapeFromOptionButtons()
    useWireEDM = Me.CheckBox1.Value: If shape = "ファミリー加工" Then useWireEDM = True
    isDia10OrLess = Me.CheckBox4.Value
    hasShapeProcessing = Me.CheckBox5.Value
    hasCuttingEdge = Me.CheckBox6.Value
    isOutsourcedProduct = Me.CheckBox9.Value
    isMisumiPurchase = Me.CheckBox7.Value
    hasAdditionalProcessing = Me.CheckBox8.Value
    If hasAdditionalProcessing And Me.ComboBox3.ListIndex > -1 Then additionalProcessName = Me.ComboBox3.Value Else additionalProcessName = ""
    isLayoutAfterCut = Me.CheckBoxLayout.Value
    useAfterMC = Me.CheckBoxAfterMC.Value
    needsAdjustP = Me.CheckBoxAdjustP.Value
    hasTsubaProcessing = Me.CheckBoxTsuba.Value
    If hasTsubaProcessing Then
        If Me.ComboBoxTsubaCount.ListIndex > -1 Then tsubaCount = Val(Me.ComboBoxTsubaCount.Value) Else tsubaCount = 1
        If Me.ComboBoxTsubaRough.ListIndex > -1 Then tsubaRoughMethod = Me.ComboBoxTsubaRough.Value Else tsubaRoughMethod = "MC（小）"
    End If
    noChamfer = Me.CheckBoxChamferなし.Value
    hasLiftingScrew = Me.CheckBoxTsurinejiあり.Value
    useSmallStartHole = Me.CheckBoxStartHoleSmall.Value
    If TypeName(Me.Controls("CheckBoxKatabori")) = "CheckBox" Then kataboriChoosenByUser = Me.CheckBoxKatabori.Value Else kataboriChoosenByUser = False
    If TypeName(Me.Controls("CheckBoxNaraiKensaku")) = "CheckBox" Then naraiKensakuChoosenByUser = Me.CheckBoxNaraiKensaku.Value Else naraiKensakuChoosenByUser = False
    If TypeName(Me.Controls("CheckBoxSingleMCPreHeat")) = "CheckBox" Then isSingleMCPreHeat = Me.CheckBoxSingleMCPreHeat.Value Else isSingleMCPreHeat = False
    If TypeName(Me.Controls("CheckBoxTripleMCPreHeat")) = "CheckBox" Then isTripleMCPreHeat = Me.CheckBoxTripleMCPreHeat.Value Else isTripleMCPreHeat = False

    If TypeName(Me.Controls("CheckBoxAutoSgCount")) = "CheckBox" Then autoSgCountValue = Me.CheckBoxAutoSgCount.Value Else autoSgCountValue = True
    If Not autoSgCountValue And TypeName(Me.Controls("ComboBoxSgCount")) = "ComboBox" Then
        If Me.ComboBoxSgCount.ListIndex > -1 Then userSgCountValue = Val(Me.ComboBoxSgCount.Value) Else userSgCountValue = 3
    Else
        userSgCountValue = 0
    End If
    ' --- 分岐処理 ---
    If isOutsourcedProduct Then
        Dim outsourcedSupplier As String
        If Me.ComboBox2.ListIndex > -1 Then outsourcedSupplier = Me.ComboBox2.Value Else outsourcedSupplier = "(外注先未選択)"
        Call AddItemToPreviewList("外注", outsourcedSupplier, "", "", "", "", "")
        If needsOutsourcingForCoating And coatingTypeKey <> "" Then
            Dim coatingSupplierNamePreview As String: coatingSupplierNamePreview = GetOutsourcingSupplierName(coatingTypeKey)
            If coatingSupplierNamePreview = "" Then coatingSupplierNamePreview = coatingTypeKey & " (業者未設定)"
            Call AddItemToPreviewList("外注", coatingSupplierNamePreview, "", "", "", "", "コーティング")
        End If
        Call PreviewAddAdjustPProcess(needsAdjustP)
    ElseIf isMisumiPurchase Then
        Call AddItemToPreviewList("副材(購入品)", "ﾐｽﾐ", "", "", "", "", "")
        If hasAdditionalProcessing And additionalProcessName <> "" Then
            Dim timesPreview As Variant ' ★修正箇所: 変数名のタイポ修正 (ｂｊ -> なし)
            timesPreview = GetProcessTimes(additionalProcessName) ' ★修正箇所: 代入を分離 (可読性のため、必須ではない)
            If IsArray(timesPreview) Then
                Call AddItemToPreviewList(additionalProcessName, "", CStr(timesPreview(0)), CStr(timesPreview(1)), CStr(timesPreview(2)), CStr(timesPreview(3)), CStr(timesPreview(4)))
            Else
                Call AddItemToPreviewList(additionalProcessName, "", "", "", "", "", "※工数/備考未設定:" & additionalProcessName)
            End If
        End If
        Call PreviewAddAdjustPProcess(needsAdjustP)
    ElseIf isLayoutAfterCut Then ' ★修正箇所: 以前の修正で "the" -> "Then" になっていることを確認
        Call PreviewProcessLayoutAfterCut(needsPolishing, hasCuttingEdge, needsOutsourcingForCoating, coatingTypeKey, needsAdjustP, hasTsubaProcessing, tsubaCount, tsubaRoughMethod, kataboriChoosenByUser, naraiKensakuChoosenByUser, useAfterMC, shape)
    ElseIf isGeibiOutsource Then
        Dim geibiSupplierNamePreview As String: geibiSupplierNamePreview = GetOutsourcingSupplierName("GEIBI")
        If geibiSupplierNamePreview = "" Then geibiSupplierNamePreview = "ｹﾞｲﾋﾞ鋼業"
        Select Case geibiPattern
            Case "材料～焼きまで"
                Call AddItemToPreviewList("外注", geibiSupplierNamePreview, "", "", "", "", geibiPattern)
                Call PreviewAddPostHeatTreatmentProcesses(materialCode, shape, useWireEDM, isDia10OrLess, hasShapeProcessing, hasCuttingEdge, useAfterMC, useSmallStartHole, hasTsubaProcessing, tsubaCount, tsubaRoughMethod, needsPolishing, needsOutsourcingForCoating, coatingTypeKey, needsAdjustP, kataboriChoosenByUser, naraiKensakuChoosenByUser, autoSgCountValue, userSgCountValue)
            Case "荒加工のみ"
                Call PreviewAddMaterialPurchase(materialCode, noChamfer, hasLiftingScrew)
                Call AddItemToPreviewList("外注", geibiSupplierNamePreview, "", "", "", "", geibiPattern)
                Call PreviewAddTapHole(hasSubZero)
                If Not (materialCode = "NAK80" Or materialCode = "FDAC" Or materialCode = "SS400") Then Call PreviewAddHeatTreatment(materialCode, hasSubZero)
                Call PreviewAddPostHeatTreatmentProcesses(materialCode, shape, useWireEDM, isDia10OrLess, hasShapeProcessing, hasCuttingEdge, useAfterMC, useSmallStartHole, hasTsubaProcessing, tsubaCount, tsubaRoughMethod, needsPolishing, needsOutsourcingForCoating, coatingTypeKey, needsAdjustP, kataboriChoosenByUser, naraiKensakuChoosenByUser, autoSgCountValue, userSgCountValue)
            Case "荒～焼きまで"
                Call PreviewAddMaterialPurchase(materialCode, noChamfer, hasLiftingScrew)
                Call AddItemToPreviewList("外注", geibiSupplierNamePreview, "", "", "", "", geibiPattern)
                Call PreviewAddPostHeatTreatmentProcesses(materialCode, shape, useWireEDM, isDia10OrLess, hasShapeProcessing, hasCuttingEdge, useAfterMC, useSmallStartHole, hasTsubaProcessing, tsubaCount, tsubaRoughMethod, needsPolishing, needsOutsourcingForCoating, coatingTypeKey, needsAdjustP, kataboriChoosenByUser, naraiKensakuChoosenByUser, autoSgCountValue, userSgCountValue)
        End Select
    Else ' 通常ルート
        Call PreviewAddMaterialPurchase(materialCode, noChamfer, hasLiftingScrew)
        Call PreviewAddMCBeforeHeatTreatment(shape, isSingleMCPreHeat, isTripleMCPreHeat)
        Call PreviewAddTapHole(hasSubZero)
        If Not (materialCode = "NAK80" Or materialCode = "FDAC" Or materialCode = "SS400") Then Call PreviewAddHeatTreatment(materialCode, hasSubZero)
        Call PreviewAddPostHeatTreatmentProcesses(materialCode, shape, useWireEDM, isDia10OrLess, hasShapeProcessing, hasCuttingEdge, useAfterMC, useSmallStartHole, hasTsubaProcessing, tsubaCount, tsubaRoughMethod, needsPolishing, needsOutsourcingForCoating, coatingTypeKey, needsAdjustP, kataboriChoosenByUser, naraiKensakuChoosenByUser, autoSgCountValue, userSgCountValue)
    End If
If m_lPreviewProcessCount > 0 Then
    For i = 0 To m_lPreviewProcessCount - 1
        With Me.ListBoxPreview
            .AddItem m_arrPreviewProcesses(i).ProcessName
            .List(.ListCount - 1, 1) = m_arrPreviewProcesses(i).Supplier
            .List(.ListCount - 1, 2) = m_arrPreviewProcesses(i).MaeDandoriTime
            .List(.ListCount - 1, 3) = m_arrPreviewProcesses(i).YujinTime
            .List(.ListCount - 1, 4) = m_arrPreviewProcesses(i).MachineTime
            .List(.ListCount - 1, 5) = m_arrPreviewProcesses(i).GoDandoriTime
            .List(.ListCount - 1, 6) = m_arrPreviewProcesses(i).Bikou
        End With
    Next i
Else
Debug.Print "UpdatePreview: m_lPreviewProcessCount の値 = " & m_lPreviewProcessCount ' ★デバッグ用に追加
    If Me.ListBoxPreview.ListCount <= 1 Then
        Me.ListBoxPreview.AddItem "(プレビューする工程がありません)"
        For i = 1 To Me.ListBoxPreview.ColumnCount - 1
            Me.ListBoxPreview.List(Me.ListBoxPreview.ListCount - 1, i) = ""
        Next i
    End If
End If
End Sub
Private Sub RefreshListBoxFromInternalArray()
    Dim i As Long

    ' ListBoxの内容をクリア (ヘッダー行を除く)
    For i = Me.ListBoxPreview.ListCount - 1 To 1 Step -1 ' ヘッダー行(インデックス0)は残す
        Me.ListBoxPreview.RemoveItem i
    Next i
    ' もしヘッダー行も消えてしまう可能性がある場合の再追加 (UserForm_Initializeにも同様のコードあり)
    If Me.ListBoxPreview.ListCount = 0 Then
         With Me.ListBoxPreview
            .ColumnCount = 7 ' 念のため再設定
            .ColumnWidths = "110;70;40;40;40;40;120" ' 念のため再設定
            .AddItem "工程名"
            .List(.ListCount - 1, 1) = "業者"
            .List(.ListCount - 1, 2) = "前段取"
            .List(.ListCount - 1, 3) = "有人"
            .List(.ListCount - 1, 4) = "機械"
            .List(.ListCount - 1, 5) = "後段取"
            .List(.ListCount - 1, 6) = "備考"
        End With
    End If

    ' m_arrPreviewProcesses 配列に格納されたデータをリストボックスに表示
    If m_lPreviewProcessCount > 0 Then
        For i = 0 To m_lPreviewProcessCount - 1
            With Me.ListBoxPreview
                .AddItem m_arrPreviewProcesses(i).ProcessName
                .List(.ListCount - 1, 1) = m_arrPreviewProcesses(i).Supplier
                .List(.ListCount - 1, 2) = m_arrPreviewProcesses(i).MaeDandoriTime
                .List(.ListCount - 1, 3) = m_arrPreviewProcesses(i).YujinTime
                .List(.ListCount - 1, 4) = m_arrPreviewProcesses(i).MachineTime
                .List(.ListCount - 1, 5) = m_arrPreviewProcesses(i).GoDandoriTime
                .List(.ListCount - 1, 6) = m_arrPreviewProcesses(i).Bikou
            End With
        Next i
    Else
        ' プレビューする工程がない場合の処理
        If Me.ListBoxPreview.ListCount <= 1 Then
             Me.ListBoxPreview.AddItem "(プレビューする工程がありません)"
             Dim j As Long
             For j = 1 To Me.ListBoxPreview.ColumnCount - 1
                 Me.ListBoxPreview.List(Me.ListBoxPreview.ListCount - 1, j) = ""
             Next j
        End If
    End If
End Sub

' リストボックスにアイテムを追加するヘルパーサブルーチン
Private Sub AddItemToPreviewList(procName As String, Optional Supplier As String = "", _
                                Optional maeD As Variant = "", Optional yujin As Variant = "", Optional machine As Variant = "", Optional goD As Variant = "", _
                                Optional remark As String = "")
                               
    ' 配列の現在のサイズを確認し、必要であれば拡張する
    If m_lPreviewProcessCount > UBound(m_arrPreviewProcesses) Then
        ReDim Preserve m_arrPreviewProcesses(0 To m_lPreviewProcessCount + 9)
    End If

    ' 配列にデータを格納
    With m_arrPreviewProcesses(m_lPreviewProcessCount)
        .ProcessName = procName
        .Supplier = Supplier
        .MaeDandoriTime = CStr(maeD)
        .YujinTime = CStr(yujin)
        .MachineTime = CStr(machine)
        .GoDandoriTime = CStr(goD)
        .Bikou = remark
    End With

    ' 格納した工程数をインクリメント
    m_lPreviewProcessCount = m_lPreviewProcessCount + 1
End Sub

' --- プレビュー用の各種工程追加サブルーチン ---
Private Sub PreviewAddMaterialPurchase(materialCodePreview As String, noChamferPreview As Boolean, hasLiftingScrewPreview As Boolean)
    Dim Supplier As String, materialData As Variant, normalizedMaterialCode As String
    normalizedMaterialCode = UCase(Trim(materialCodePreview))
    If materialInfoDict Is Nothing Or Not materialInfoDict.Exists(normalizedMaterialCode) Then
        Supplier = "(仕入先不明)"
    Else
        materialData = materialInfoDict(normalizedMaterialCode)
        Supplier = CStr(materialData(0))
    End If
    Dim specificMemo As String: specificMemo = IIf(noChamferPreview, "Cなし", "Cあり")
    If hasLiftingScrewPreview Then specificMemo = specificMemo & ",吊り"
    Call AddItemToPreviewList("主材購入", Supplier, "", "", "", "", specificMemo)
End Sub

Private Sub PreviewAddMCBeforeHeatTreatment(shapePreview As String, reduceToOneStepPreview As Boolean, increaseToThreeStepsPreview As Boolean)
    Dim mcProcessName As String: mcProcessName = IIf(shapePreview = "プレート", "M/C（大）", "M/C（小）")
    Dim i As Integer, times As Variant, maeDandori As String, yTime As String, mTime As String, sTimeBase As String, sTimeFinal As String
    Dim loopCount As Integer, specificMemo As String
    times = GetProcessTimes(mcProcessName, "熱処理前")
    If IsArray(times) Then maeDandori = CStr(times(0)): yTime = CStr(times(1)): mTime = CStr(times(2)): sTimeBase = CStr(times(3)) Else maeDandori = "": yTime = "0.25": mTime = "0.1": sTimeBase = "0.1"
    If increaseToThreeStepsPreview Then
    loopCount = 3
ElseIf reduceToOneStepPreview Then
    loopCount = 1
Else
    loopCount = 2
End If

    For i = 1 To loopCount
        sTimeFinal = IIf(i = loopCount, sTimeBase, ""): specificMemo = i & "/" & loopCount
        Call AddItemToPreviewList(mcProcessName, "", maeDandori, yTime, mTime, sTimeFinal, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
    Next i
End Sub

Private Sub PreviewAddTapHole(hasSubZeroPreview As Boolean)
    Dim specificMemo As String, remarksFromSheetF As String, finalMemo As String, times As Variant, MaeDandoriTime As String
    If hasSubZeroPreview Then specificMemo = "ｻﾌﾞｾﾞﾛ注意" Else specificMemo = ""
    times = GetProcessTimes("穴あけﾀｯﾌﾟ")
    If IsArray(times) Then
        MaeDandoriTime = CStr(times(0)): remarksFromSheetF = CStr(times(4))
        If specificMemo <> "" Then finalMemo = specificMemo Else finalMemo = remarksFromSheetF
        Call AddItemToPreviewList("穴あけﾀｯﾌﾟ", "", MaeDandoriTime, CStr(times(1)), CStr(times(2)), CStr(times(3)), finalMemo)
    Else
        finalMemo = specificMemo & IIf(specificMemo <> "", " ", "") & "(※工数/備考未設定)"
        Call AddItemToPreviewList("穴あけﾀｯﾌﾟ", "", "", "0.3", "", "", finalMemo)
    End If
End Sub

Private Sub PreviewAddHeatTreatment(materialCodePreview As String, hasSubZeroPreview As Boolean)
    Dim Supplier As String, materialData As Variant, normalizedMaterialCode As String
    normalizedMaterialCode = UCase(Trim(materialCodePreview))
    
    If materialInfoDict Is Nothing Or Not materialInfoDict.Exists(normalizedMaterialCode) Then
        Supplier = ""
        If hasSubZeroPreview Then
            Supplier = GetOutsourcingSupplierName("HEAT_SUBZERO_DEFAULT")
            If Supplier = "" Then
                Supplier = "ｴｼﾞｿﾝ熱処理(仮)"
            End If
        End If
        ' (サブゼロなしの場合のフォールバックも必要なら追加)
        
    Else
        materialData = materialInfoDict(normalizedMaterialCode)
        
        If hasSubZeroPreview Then
            Supplier = CStr(materialData(2))
            If Supplier = "" Then
                Supplier = GetOutsourcingSupplierName("HEAT_SUBZERO_DEFAULT")
                If Supplier = "" Then
                    Supplier = "ｴｼﾞｿﾝ熱処理(仮)"
                End If
            End If
        Else
            Supplier = CStr(materialData(1))
        End If
        
    End If
    
    If Supplier = "" Then Supplier = "(熱処理業者不明)"
    
    Call AddItemToPreviewList("熱処理", Supplier, "", "", "", "", IIf(hasSubZeroPreview, "サブゼロ有", "サブゼロ無"))
End Sub


Private Sub PreviewAddPostHeatTreatmentSG(shapePreview As String, useWireEDMPreview As Boolean, useAfterMCPreview As Boolean, autoSg As Boolean, userSgNum As Integer)
    Dim sgCount As Integer, i As Integer, times As Variant, maeDandori As String, yTime As String, mTime As String, sTimeBase As String, sTimeFinal As String, specificMemo As String
    If autoSg Then
        Select Case shapePreview
            Case "ブロック": sgCount = 6
           Case "プレート"
    If Not useWireEDMPreview And useAfterMCPreview Then
        sgCount = 4
    ElseIf Not useWireEDMPreview Then
        sgCount = 2
    ElseIf useAfterMCPreview Then
        sgCount = 4
    Else
        sgCount = 3
    End If

            Case "ファミリー加工": sgCount = 2
            Case Else: sgCount = 3
        End Select
    Else
        sgCount = userSgNum: If sgCount < 1 Or sgCount > 6 Then sgCount = 3
    End If
    times = GetProcessTimes("平面研削 NC", "SG")
    If IsArray(times) Then maeDandori = CStr(times(0)): yTime = CStr(times(1)): mTime = CStr(times(2)): sTimeBase = CStr(times(3)) Else maeDandori = "": yTime = "0.3": mTime = "0.3": sTimeBase = "0.1"
    For i = 1 To sgCount
        sTimeFinal = IIf(i = sgCount, sTimeBase, ""): specificMemo = i & "/" & sgCount
        Call AddItemToPreviewList("平面研削 NC", "", maeDandori, yTime, mTime, sTimeFinal, specificMemo & " " & IIf(IsArray(times), "", " (※工数未設定)"))
    Next i
End Sub

Private Sub PreviewAddAfterMCFinish(shapePreview As String)
    Dim mcFinishName As String
    Dim maeDandori As String, yujin As String, machine As String, setup As String
    Dim times As Variant
    Dim finalMemo As String
    
    mcFinishName = IIf(shapePreview = "プレート", "M/C（大）", "M/C（小）")
    times = GetProcessTimes(mcFinishName, "MC仕上げ")
    
    If IsArray(times) Then
        maeDandori = CStr(times(0))
        yujin = CStr(times(1))
        machine = CStr(times(2))
        setup = CStr(times(3))
        finalMemo = CStr(times(4))
        
        If finalMemo = "" Then
            finalMemo = "MC仕上げ"
        End If
    Else
        maeDandori = ""
        If shapePreview = "プレート" Then
            yujin = "0.4"
            machine = "0.2"
            setup = "0.2"
        Else
            yujin = "0.25"
            machine = "0.1"
            setup = "0.1"
        End If
        finalMemo = "MC仕上げ (※工数/備考未設定)"
    End If
    
    Call AddItemToPreviewList(mcFinishName, "", maeDandori, yujin, machine, setup, finalMemo)
End Sub


Private Sub PreviewAddSmallStartHole()
    Dim times As Variant
    Dim remarksFromSheetF As String
    Dim MaeDandoriTime As String
    
    times = GetProcessTimes("細穴放電加工")
    
    If IsArray(times) Then
        MaeDandoriTime = CStr(times(0))
        remarksFromSheetF = CStr(times(4))
        Call AddItemToPreviewList("細穴放電加工", "", MaeDandoriTime, CStr(times(1)), CStr(times(2)), CStr(times(3)), remarksFromSheetF)
    Else
        Call AddItemToPreviewList("細穴放電加工", "", "", "0.8", "", "0.1", "※工数/備考未設定")
    End If
End Sub


Private Sub PreviewAddWireEDMProcessing(isDia10OrLessPreview As Boolean, hasShapeProcessingPreview As Boolean, isFamilyProcessingPreview As Boolean)
    Dim times As Variant, remarksFromSheetF As String, maeDandori As String, yTime As String, mTime As String, sTime As String, specificMemo As String

    If isFamilyProcessingPreview Then
        ' === ファミリー加工の場合の処理を修正 ===
        If hasShapeProcessingPreview Then ' CheckBox5 (形状加工あり) の状態を見る
            ' ファミリー加工 かつ 形状加工あり の場合は2工程
            specificMemo = "荒加工" ' ※ファミリー加工用の備考やキーが必要な場合は要調整
            times = GetProcessTimes("ﾜｲﾔ放電加工", "荒加工")
            If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "3": sTime = ""
            Call AddItemToPreviewList("ﾜｲﾔ放電加工", "", maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
            
            specificMemo = "ｶｽ取り・仕上げ" ' ※ファミリー加工用の備考やキーが必要な場合は要調整
            times = GetProcessTimes("ﾜｲﾔ放電加工", "ｶｽ取り・仕上げ")
            If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "6": sTime = "0.5"
            Call AddItemToPreviewList("ﾜｲﾔ放電加工", "", maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        Else
            ' ファミリー加工 かつ 形状加工なし の場合は1工程
            times = GetProcessTimes("ﾜｲﾔ放電加工")
            If IsArray(times) Then
                maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3): remarksFromSheetF = CStr(times(4))
            Else
                maeDandori = "": yTime = "0.75": mTime = "2": sTime = "0.5": remarksFromSheetF = "※工数/備考未設定"
            End If
            Call AddItemToPreviewList("ﾜｲﾔ放電加工", "", maeDandori, yTime, mTime, sTime, remarksFromSheetF)
        End If
    ElseIf isDia10OrLessPreview And hasShapeProcessingPreview Then
        ' (変更なし) 2工程
        specificMemo = "荒加工"
        times = GetProcessTimes("ﾜｲﾔ放電加工", "荒加工")
        If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "3": sTime = ""
        Call AddItemToPreviewList("ﾜｲﾔ放電加工", "", maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        
        specificMemo = "ｶｽ取り・仕上げ"
        times = GetProcessTimes("ﾜｲﾔ放電加工", "ｶｽ取り・仕上げ")
        If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "6": sTime = "0.5"
        Call AddItemToPreviewList("ﾜｲﾔ放電加工", "", maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
    ElseIf isDia10OrLessPreview Or Not hasShapeProcessingPreview Then
        ' (変更なし) 1工程
        times = GetProcessTimes("ﾜｲﾔ放電加工")
        If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3): remarksFromSheetF = CStr(times(4)) Else maeDandori = "": yTime = "0.75": mTime = "2": sTime = "0.5": remarksFromSheetF = "※工数/備考未設定"
        Call AddItemToPreviewList("ﾜｲﾔ放電加工", "", maeDandori, yTime, mTime, sTime, remarksFromSheetF)
        
    Else
        ' (変更なし) isFamilyProcessingPreview = False AND isDia10OrLessPreview = False AND hasShapeProcessingPreview = True の場合 (2工程)
        specificMemo = "荒加工"
        times = GetProcessTimes("ﾜｲﾔ放電加工", "荒加工")
        If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "3": sTime = ""
        Call AddItemToPreviewList("ﾜｲﾔ放電加工", "", maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        
        specificMemo = "ｶｽ取り・仕上げ"
        times = GetProcessTimes("ﾜｲﾔ放電加工", "ｶｽ取り・仕上げ")
        If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "6": sTime = "0.5"
        Call AddItemToPreviewList("ﾜｲﾔ放電加工", "", maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
    End If
End Sub

Private Sub PreviewAddPostWireEDMGrinding(shapePreview As String, needsPolishingPreview As Boolean, hasCuttingEdgePreview As Boolean, hasTsubaProcessingPreview As Boolean, kataboriChoosenByUserAsLaterStepPreview As Boolean)
    Dim specificMemo As String, times As Variant, processKey As String, processKeyDetail As String, maeDandori As String, yTime As String, mTime As String, sTime As String
    If shapePreview = "ファミリー加工" Then
        If needsPolishingPreview Then
            processKey = "平面研削 汎用": processKeyDetail = "ファミリー後ヘソ取り": specificMemo = "ﾍｿ取り"
            times = GetProcessTimes(processKey, processKeyDetail): If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.2": mTime = "": sTime = "0.1"
            Call AddItemToPreviewList(processKey, "", maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        Else
            processKey = "平面研削 NC": specificMemo = "ﾍｿ取り"
            If hasCuttingEdgePreview And Not hasTsubaProcessingPreview And Not kataboriChoosenByUserAsLaterStepPreview Then specificMemo = "ﾍｿ・上面"
            processKeyDetail = IIf(specificMemo = "ﾍｿ・上面", "ファミリー後ヘソ上面", "ファミリー後ヘソ取り")
            times = GetProcessTimes(processKey, processKeyDetail): If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.2": mTime = "0.3": sTime = "0.1"
            Call AddItemToPreviewList(processKey, "", maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        End If
    ElseIf shapePreview = "ブロック" Or shapePreview = "プレート" Then
        If hasCuttingEdgePreview And Not needsPolishingPreview Then
            Dim addThisSG As Boolean: addThisSG = True
            If kataboriChoosenByUserAsLaterStepPreview Then addThisSG = False
            If addThisSG And hasTsubaProcessingPreview Then If Not needsPolishingPreview And Not kataboriChoosenByUserAsLaterStepPreview Then addThisSG = False
            If addThisSG Then
                Dim grindingMachine As String: grindingMachine = IIf(shapePreview = "プレート", "平面研削 NC", "平面研削 汎用")
                specificMemo = "上面"
                times = GetProcessTimes(grindingMachine, "上面後"): If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.2": mTime = IIf(grindingMachine = "平面研削 NC", "0.2", ""): sTime = "0.1"
                Call AddItemToPreviewList(grindingMachine, "", maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
            End If
        End If
    End If
End Sub

Private Sub PreviewAddTsubaProcessing(tsubaCountPreview As Integer, tsubaRoughMethodPreview As String, needsPolishingForTsubaUePreview As Boolean, kataboriChoosenByUserPreview As Boolean, ByVal hasCuttingEdgeAsParam As Boolean) '引数追加
    Dim n As Integer, isLastTsuba As Boolean, specificMemoRough As String, specificMemoFinish As String
    Dim timesRough As Variant, timesFinish As Variant, maeDandoriRough As String, yRough As String, mRough As String, sRough As String, maeDandoriFinish As String, yFinish As String, mFinish As String, sFinish As String
    timesRough = GetProcessTimes(tsubaRoughMethodPreview, "つば荒")
    timesFinish = GetProcessTimes("平面研削 NC", "つば仕上げ")
    If IsArray(timesRough) Then maeDandoriRough = CStr(timesRough(0)): yRough = CStr(timesRough(1)): mRough = CStr(timesRough(2)): sRough = CStr(timesRough(3)) Else maeDandoriRough = "": yRough = "0.6": mRough = "0.1": sRough = "0.1"
    If IsArray(timesFinish) Then maeDandoriFinish = CStr(timesFinish(0)): yFinish = CStr(timesFinish(1)): mFinish = CStr(timesFinish(2)): sFinish = CStr(timesFinish(3)) Else maeDandoriFinish = "": yFinish = "0.3": mFinish = "0.1": sFinish = "0.1"
    For n = 1 To tsubaCountPreview
        specificMemoRough = "つば荒 " & n & "/" & tsubaCountPreview
        Call AddItemToPreviewList(tsubaRoughMethodPreview, "", maeDandoriRough, yRough, mRough, sRough, specificMemoRough & IIf(IsArray(timesRough), "", " (※工数未設定)"))
        isLastTsuba = (n = tsubaCountPreview)
        specificMemoFinish = "つば仕上げ " & n & "/" & tsubaCountPreview
        ' 「・上面」を追記する条件を修正
        If isLastTsuba And hasCuttingEdgeAsParam And Not needsPolishingForTsubaUePreview And Not kataboriChoosenByUserPreview Then
            specificMemoFinish = specificMemoFinish & "・上面"
        End If
        Call AddItemToPreviewList("平面研削 NC", "", maeDandoriFinish, yFinish, mFinish, sFinish, specificMemoFinish & IIf(IsArray(timesFinish), "", " (※工数未設定)"))
    Next n
End Sub

Private Sub PreviewAddPolishingAndCoating(needsPolishingPreview As Boolean, hasCuttingEdgePreview As Boolean, needsOutsourcingForCoatingPreview As Boolean, coatingTypeKeyPreview As String)
    Dim times As Variant, remarksFromSheetF As String, specificMemo As String, maeDandori As String, yTime As String, mTime As String, sTime As String
    If needsPolishingPreview Then
        times = GetProcessTimes("磨き"): If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3): remarksFromSheetF = CStr(times(4)) Else maeDandori = "": yTime = "0.5": mTime = "": sTime = "": remarksFromSheetF = "※工数/備考未設定"
        Call AddItemToPreviewList("磨き", "", maeDandori, yTime, mTime, sTime, remarksFromSheetF)
        If hasCuttingEdgePreview Then
            specificMemo = "上面": times = GetProcessTimes("平面研削 NC", "上面後"): If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.2": mTime = "0.2": sTime = "0.1"
            Call AddItemToPreviewList("平面研削 NC", "", maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        End If
    End If
    If needsOutsourcingForCoatingPreview And coatingTypeKeyPreview <> "" Then
        Dim coatingSupplierNamePreview As String: coatingSupplierNamePreview = GetOutsourcingSupplierName(coatingTypeKeyPreview)
        If coatingSupplierNamePreview = "" Then coatingSupplierNamePreview = coatingTypeKeyPreview & " (業者未設定)"
        Call AddItemToPreviewList("外注", coatingSupplierNamePreview, "", "", "", "", "コーティング")
    End If
End Sub

Private Sub PreviewAddAdjustPProcess(needsAdjustPPreview As Boolean)
    If needsAdjustPPreview Then
        Dim times As Variant
        Dim remarksFromSheetF As String
        
        times = GetProcessTimes("調整（P）")
        
        If IsArray(times) Then
            remarksFromSheetF = CStr(times(4))
            Call AddItemToPreviewList("調整（P）", "", CStr(times(0)), CStr(times(1)), CStr(times(2)), CStr(times(3)), remarksFromSheetF)
        Else
            Call AddItemToPreviewList("調整（P）", "", "", "", "", "", "※工数/備考未設定")
        End If
        
    End If
End Sub


Private Sub PreviewAddPostHeatTreatmentProcesses(materialCodeP As String, shapeP As String, useWireEDMP As Boolean, isDia10OrLessP As Boolean, hasShapeProcessingP As Boolean, hasCuttingEdgeP As Boolean, _
                                             useAfterMCP As Boolean, useSmallStartHoleP As Boolean, hasTsubaProcessingP As Boolean, tsubaCountP As Integer, tsubaRoughMethodP As String, _
                                             needsPolishingP As Boolean, needsOutsourcingForCoatingP As Boolean, coatingTypeKeyP As String, needsAdjustPP As Boolean, _
                                             kataboriChoosenByUserP As Boolean, naraiKensakuChoosenByUserP As Boolean, autoSgP As Boolean, userSgNumP As Integer)
    
    ' Dim skipPostHeatProcesses As Boolean: skipPostHeatProcesses = (materialCodeP = "NAK80" Or materialCodeP = "FDAC" Or materialCodeP = "SS400") ' ← この行を削除
    ' Dim times As Variant, remarksFromSheetF As String, specificMemo As String, maeDandori As String, yTime As String, mTime As String, sTime As String ' この宣言は必要に応じて残すか移動

    ' If Not skipPostHeatProcesses Then ' ← このIf文の開始行を削除またはコメントアウト
    
        Call PreviewAddPostHeatTreatmentSG(shapeP, useWireEDMP, useAfterMCP, autoSgP, userSgNumP)
        If useAfterMCP Then Call PreviewAddAfterMCFinish(shapeP)
        If useWireEDMP And useSmallStartHoleP Then Call PreviewAddSmallStartHole
        If useWireEDMP Then
            Call PreviewAddWireEDMProcessing(isDia10OrLessP, hasShapeProcessingP, (shapeP = "ファミリー加工"))
            Call PreviewAddPostWireEDMGrinding(shapeP, needsPolishingP, hasCuttingEdgeP, hasTsubaProcessingP, kataboriChoosenByUserP)
        End If
        If hasTsubaProcessingP Then Call PreviewAddTsubaProcessing(tsubaCountP, tsubaRoughMethodP, needsPolishingP, kataboriChoosenByUserP, hasCuttingEdgeP)
        If naraiKensakuChoosenByUserP Then
            Dim timesNarai As Variant, remarksNarai As String, maeDandoriNarai As String, yTimeNarai As String, mTimeNarai As String, sTimeNarai As String ' 変数名を変更または宣言位置を調整
            timesNarai = GetProcessTimes("倣い研削")
            If IsArray(timesNarai) Then maeDandoriNarai = timesNarai(0): yTimeNarai = timesNarai(1): mTimeNarai = timesNarai(2): sTimeNarai = timesNarai(3): remarksNarai = CStr(timesNarai(4)) Else maeDandoriNarai = "": yTimeNarai = "1.0": mTimeNarai = "": sTimeNarai = "0.2": remarksNarai = "※工数/備考未設定"
            Call AddItemToPreviewList("倣い研削", "", maeDandoriNarai, yTimeNarai, mTimeNarai, sTimeNarai, remarksNarai)
        End If
        If kataboriChoosenByUserP Then
            Dim timesKatabori As Variant, remarksKatabori As String, specificMemoKatabori As String, maeDandoriKatabori As String, yTimeKatabori As String, mTimeKatabori As String, sTimeKatabori As String ' 変数名を変更または宣言位置を調整
            timesKatabori = GetProcessTimes("型彫放電加工")
            If IsArray(timesKatabori) Then maeDandoriKatabori = timesKatabori(0): yTimeKatabori = timesKatabori(1): mTimeKatabori = timesKatabori(2): sTimeKatabori = timesKatabori(3): remarksKatabori = CStr(timesKatabori(4)) Else maeDandoriKatabori = "": yTimeKatabori = "0.5": mTimeKatabori = "1.5": sTimeKatabori = "0.2": remarksKatabori = "※工数/備考未設定"
            Call AddItemToPreviewList("型彫放電加工", "", maeDandoriKatabori, yTimeKatabori, mTimeKatabori, sTimeKatabori, remarksKatabori)
            If hasCuttingEdgeP And Not needsPolishingP Then
                specificMemoKatabori = "上面"
                Dim timesKataboriSg As Variant, maeDandoriKataboriSg As String, yTimeKataboriSg As String, mTimeKataboriSg As String, sTimeKataboriSg As String  ' 変数名を変更または宣言位置を調整
                timesKataboriSg = GetProcessTimes("平面研削 NC", "上面後")
                If IsArray(timesKataboriSg) Then maeDandoriKataboriSg = timesKataboriSg(0): yTimeKataboriSg = timesKataboriSg(1): mTimeKataboriSg = timesKataboriSg(2): sTimeKataboriSg = timesKataboriSg(3) Else maeDandoriKataboriSg = "": yTimeKataboriSg = "0.2": mTimeKataboriSg = "0.2": sTimeKataboriSg = "0.1"
                Call AddItemToPreviewList("平面研削 NC", "", maeDandoriKataboriSg, yTimeKataboriSg, mTimeKataboriSg, sTimeKataboriSg, specificMemoKatabori & IIf(IsArray(timesKataboriSg), "", " (※工数未設定)"))
            End If
        End If
        Call PreviewAddPolishingAndCoating(needsPolishingP, hasCuttingEdgeP, needsOutsourcingForCoatingP, coatingTypeKeyP)
        
    ' End If ' ← このIf文の終了行を削除またはコメントアウト

    Call PreviewAddAdjustPProcess(needsAdjustPP)
End Sub

' --- レイアウト切り離し後部品の場合のプレビュー処理 (新規追加) ---
Private Sub PreviewProcessLayoutAfterCut(needsPolishingP As Boolean, hasCuttingEdgeP As Boolean, _
                                        needsOutsourcingForCoatingP As Boolean, coatingTypeKeyP As String, needsAdjustPP As Boolean, _
                                        hasTsubaProcessingP As Boolean, tsubaCountP As Integer, tsubaRoughMethodP As String, _
                                        kataboriChoosenByUserAsLayoutP As Boolean, naraiKensakuChoosenByUserAsLayoutP As Boolean, _
                                        useAfterMCAsLayoutP As Boolean, shapeForMCP As String)
    Dim specificMemo As String, times As Variant, processKeyDetail As String, remarksFromSheetF As String


    If hasCuttingEdgeP Then
        If hasTsubaProcessingP Or kataboriChoosenByUserAsLayoutP Or needsPolishingP Then specificMemo = "ﾍｿ取り" Else specificMemo = "ﾍｿ取り・上面"
    Else
        specificMemo = "ﾍｿ取り"
    End If
    processKeyDetail = IIf(specificMemo = "ﾍｿ取り・上面", "レイアウト後ヘソ上面", "レイアウト後ヘソ取り")
    times = GetProcessTimes("平面研削 汎用", processKeyDetail)
    If IsArray(times) Then
    Call AddItemToPreviewList("平面研削 汎用", "", CStr(times(0)), CStr(times(1)), CStr(times(2)), CStr(times(3)), specificMemo)
Else
    Call AddItemToPreviewList("平面研削 汎用", "", "", "0.1", "", "0.2", specificMemo & " (※工数未設定)")
End If

If hasTsubaProcessingP Then ' hasTsubaProcessingP はこのサブルーチンが引数として持っている想定
    Call PreviewAddTsubaProcessing(tsubaCountP, tsubaRoughMethodP, needsPolishingP, kataboriChoosenByUserAsLayoutP, hasCuttingEdgeP)
End If

If useAfterMCAsLayoutP Then
    Dim mcProcessNameLayout As String
    mcProcessNameLayout = IIf(shapeForMCP = "プレート", "M/C（大）", "M/C（小）")
    
    times = GetProcessTimes(mcProcessNameLayout, "レイアウト後MC")
    
    If IsArray(times) Then
        remarksFromSheetF = CStr(times(4))
        Call AddItemToPreviewList(mcProcessNameLayout, "", CStr(times(0)), CStr(times(1)), CStr(times(2)), CStr(times(3)), remarksFromSheetF)
    Else
        Call AddItemToPreviewList(mcProcessNameLayout, "", "", "", "", "", "※工数/備考未設定:" & mcProcessNameLayout & "-レイアウト後MC")
    End If
End If


If naraiKensakuChoosenByUserAsLayoutP Then
    times = GetProcessTimes("倣い研削", "レイアウト後")
    
    If IsArray(times) Then
        remarksFromSheetF = CStr(times(4))
        Call AddItemToPreviewList("倣い研削", "", CStr(times(0)), CStr(times(1)), CStr(times(2)), CStr(times(3)), remarksFromSheetF)
    Else
        Call AddItemToPreviewList("倣い研削", "", "", "1.0", "", "0.2", "※工数/備考未設定")
    End If
End If


If kataboriChoosenByUserAsLayoutP Then
    times = GetProcessTimes("型彫放電加工", "レイアウト後")
    
    If IsArray(times) Then
        remarksFromSheetF = CStr(times(4))
        Call AddItemToPreviewList("型彫放電加工", "", CStr(times(0)), CStr(times(1)), CStr(times(2)), CStr(times(3)), remarksFromSheetF)
    Else
        Call AddItemToPreviewList("型彫放電加工", "", "", "0.5", "1.5", "0.2", "※工数/備考未設定")
    End If

    If hasCuttingEdgeP And Not needsPolishingP Then
        times = GetProcessTimes("平面研削 NC", "レイアウト後上面")
        
        If IsArray(times) Then
            Call AddItemToPreviewList("平面研削 NC", "", CStr(times(0)), CStr(times(1)), CStr(times(2)), CStr(times(3)), "上面")
        Else
            Call AddItemToPreviewList("平面研削 NC", "", "", "0.2", "0.2", "0.1", "上面 (※工数未設定)")
        End If
    End If
End If


    Call PreviewAddPolishingAndCoating(needsPolishingP, hasCuttingEdgeP, needsOutsourcingForCoatingP, coatingTypeKeyP)
    Call PreviewAddAdjustPProcess(needsAdjustPP)
End Sub


' === 各コントロールのイベントハンドラ (プレビュー更新をトリガー) ===
Private Sub CheckBoxGeibi_Click(): Call UpdatePreview: End Sub
Private Sub ComboBoxGeibiType_Change(): Call UpdatePreview: End Sub
Private Sub CheckBox1_Click(): Call UpdatePreview: End Sub ' ワイヤーEDM
Private Sub CheckBox4_Click(): Call UpdatePreview: End Sub ' DIA10以下
Private Sub CheckBox5_Click(): Call UpdatePreview: End Sub ' 形状加工
Private Sub CheckBox6_Click(): Call UpdatePreview: End Sub ' 刃付
Private Sub CheckBox7_Click() ' ミスミ購入
    Me.ComboBox3.Enabled = Me.CheckBox7.Value
    If Not Me.CheckBox7.Value Then Me.CheckBox8.Value = False ' ミスミ購入OFFなら追加工もOFF
    Me.CheckBox8.Enabled = Me.CheckBox7.Value
    Call UpdatePreview
End Sub
Private Sub CheckBox8_Click() ' 追加加工あり (ミスミ用)
    Me.ComboBox3.Enabled = Me.CheckBox8.Value
    Call UpdatePreview
End Sub
Private Sub CheckBox9_Click() ' 外作
    Me.ComboBox2.Enabled = Me.CheckBox9.Value
    Call UpdatePreview
End Sub
Private Sub CheckBoxLayout_Click(): Call UpdatePreview: End Sub ' レイアウト切り離し後
Private Sub CheckBoxAfterMC_Click(): Call UpdatePreview: End Sub ' 焼き後MC
Private Sub CheckBoxAdjustP_Click(): Call UpdatePreview: End Sub ' 調整(P)
Private Sub CheckBoxTsuba_Click() ' ツバ加工
    Me.ComboBoxTsubaCount.Enabled = Me.CheckBoxTsuba.Value
    Me.ComboBoxTsubaRough.Enabled = Me.CheckBoxTsuba.Value
    Call UpdatePreview
End Sub
Private Sub ComboBoxTsubaCount_Change(): Call UpdatePreview: End Sub
Private Sub ComboBoxTsubaRough_Change(): Call UpdatePreview: End Sub
Private Sub CheckBoxChamferなし_Click(): Call UpdatePreview: End Sub
Private Sub CheckBoxTsurinejiあり_Click(): Call UpdatePreview: End Sub
Private Sub CheckBoxStartHoleSmall_Click(): Call UpdatePreview: End Sub
Private Sub CheckBoxKatabori_Click(): Call UpdatePreview: End Sub
Private Sub CheckBoxNaraiKensaku_Click(): Call UpdatePreview: End Sub
Private Sub CheckBoxSingleMCPreHeat_Click()
    If Me.CheckBoxSingleMCPreHeat.Value Then Me.CheckBoxTripleMCPreHeat.Value = False
    Call UpdatePreview
End Sub
Private Sub CheckBoxTripleMCPreHeat_Click()
    If Me.CheckBoxTripleMCPreHeat.Value Then Me.CheckBoxSingleMCPreHeat.Value = False
    Call UpdatePreview
End Sub
Private Sub CheckBoxAutoSgCount_Click()
    If TypeName(Me.Controls("ComboBoxSgCount")) = "ComboBox" Then Me.ComboBoxSgCount.Enabled = Not Me.CheckBoxAutoSgCount.Value
    Call UpdatePreview
End Sub
Private Sub ComboBoxSgCount_Change(): Call UpdatePreview: End Sub
Private Sub ComboBox2_Change(): Call UpdatePreview: End Sub ' 外注先 (外作時)
Private Sub ComboBox3_Change(): Call UpdatePreview: End Sub ' 追加加工 (ミスミ時)

' --- オプションボタンのイベントハンドラ ---
Private Sub OptionButton4_Click(): Call UpdatePreview: End Sub ' ブロック
Private Sub OptionButton5_Click(): Call UpdatePreview: End Sub ' プレート
Private Sub OptionButton6_Click(): Call UpdatePreview: End Sub ' ファミリー加工

' --- プレビュー用テキストボックスのChangeイベント (フォームに配置した場合) ---
Private Sub txtMaterialCodePreview_Change(): Call UpdatePreview: End Sub
Private Sub txtZValuePreview_Change(): Call UpdatePreview: End Sub
Private Sub txtSizePreview_Change(): Call UpdatePreview: End Sub
' Private Sub txtItemNamePreview_Change(): Call UpdatePreview: End Sub ' 必要に応じて
' Private Sub txtRemarksPreview_Change(): Call UpdatePreview: End Sub ' 必要に応じて


' === 既存のサブルーチン・関数 (LoadProcessTimes, GetProcessTimes, ClassifyPartBasedOnSizeString など) は変更なし ===
Private Function ClassifyPartBasedOnSizeString(ByVal sizeString As String) As String
    Dim dimsStr() As String, original_dim1 As Double, original_dim2 As Double, original_dim3 As Double
    Dim d_small As Double, d_mid As Double, d_large As Double, Volume As Double, Ratio1 As Double, Ratio2 As Double
    Dim Cond1_Result As Boolean, Cond2_Result As Boolean, Cond3_Result As Boolean, Cond4_Result As Boolean
    ClassifyPartBasedOnSizeString = "-"
    If Trim(sizeString) = "" Then Exit Function
    dimsStr = Split(Trim(sizeString), "*")
    If UBound(dimsStr) <> 2 Then Exit Function
    On Error Resume Next
    original_dim1 = CDbl(dimsStr(0)): original_dim2 = CDbl(dimsStr(1)): original_dim3 = CDbl(dimsStr(2))
    If Err.Number <> 0 Then On Error GoTo 0: Exit Function
    On Error GoTo 0
    Dim dims(0 To 2) As Double: dims(0) = original_dim1: dims(1) = original_dim2: dims(2) = original_dim3
    Dim i As Integer, j As Integer, temp As Double
    For i = 0 To UBound(dims) - 1: For j = i + 1 To UBound(dims)
        If dims(i) > dims(j) Then temp = dims(i): dims(i) = dims(j): dims(j) = temp
    Next j, i
    d_small = dims(0): d_mid = dims(1): d_large = dims(2)
    Volume = d_small * d_mid * d_large
    If d_mid = 0 Then Ratio1 = 1E+99 Else Ratio1 = d_small / d_mid
    If d_large = 0 Then Ratio2 = 1E+99 Else Ratio2 = d_small / d_large
    Cond1_Result = (d_small <= 56): Cond2_Result = ((Ratio1 < 0.6 And Ratio2 < 0.55) Or (d_small <= 30))
    Cond3_Result = (d_mid >= 58 And d_large >= 80): Cond4_Result = (Volume >= 70000)
    If Cond1_Result And Cond2_Result And Cond3_Result And Cond4_Result Then ClassifyPartBasedOnSizeString = "+" Else ClassifyPartBasedOnSizeString = "-"
End Function

Private Sub LoadProcessTimes()
    Set processTimesDict = CreateObject("Scripting.Dictionary")
    Dim wsTimes As Worksheet, lastRow As Long, iLng As Long, keyName As String
    Dim arrData(0 To 5) As String ' maeDandori, yujin, machine, goDandori, remarks, detailRemarks
    On Error Resume Next
    Set wsTimes = ThisWorkbook.Sheets(SHEET_KOUTEI_TIMES)
    On Error GoTo 0
    If wsTimes Is Nothing Then Exit Sub ' エラーメッセージはInitializeで表示
    lastRow = wsTimes.Cells(wsTimes.Rows.Count, COL_TIME_KEY).End(xlUp).Row
    For iLng = 2 To lastRow
        keyName = Trim(CStr(wsTimes.Cells(iLng, COL_TIME_KEY).Value))
        arrData(0) = Trim(CStr(wsTimes.Cells(iLng, COL_TIME_MAE_DANDORI).Value))
        arrData(1) = Trim(CStr(wsTimes.Cells(iLng, COL_TIME_YUJIN).Value))
        arrData(2) = Trim(CStr(wsTimes.Cells(iLng, COL_TIME_MACHINE).Value))
        arrData(3) = Trim(CStr(wsTimes.Cells(iLng, COL_TIME_SETUP).Value))
        arrData(4) = Trim(CStr(wsTimes.Cells(iLng, COL_TIME_REMARKS).Value))
        arrData(5) = Trim(CStr(wsTimes.Cells(iLng, COL_TIME_REMARKS_DETAIL).Value))
        If keyName <> "" Then If Not processTimesDict.Exists(keyName) Then processTimesDict.Add keyName, arrData
    Next iLng
End Sub
Private Sub LoadMaterialInfo()
    Set materialInfoDict = CreateObject("Scripting.Dictionary")
    Dim wsMaterial As Worksheet, lastRow As Long, iLng As Long, materialCodeKey As String
    Dim arrData(0 To 2) As String ' supplier, heatNormal, heatSubzero
    On Error Resume Next
    Set wsMaterial = ThisWorkbook.Sheets(SHEET_KOUTEI_TIMES)
    On Error GoTo 0
    If wsMaterial Is Nothing Then Exit Sub
    lastRow = wsMaterial.Cells(wsMaterial.Rows.Count, COL_MATERIAL_CODE).End(xlUp).Row
    For iLng = 2 To lastRow
        materialCodeKey = UCase(Trim(CStr(wsMaterial.Cells(iLng, COL_MATERIAL_CODE).Value)))
        arrData(0) = Trim(CStr(wsMaterial.Cells(iLng, COL_MATERIAL_SUPPLIER).Value))
        arrData(1) = Trim(CStr(wsMaterial.Cells(iLng, COL_MATERIAL_HEAT_NORMAL).Value))
        arrData(2) = Trim(CStr(wsMaterial.Cells(iLng, COL_MATERIAL_HEAT_SUBZERO).Value))
        If materialCodeKey <> "" Then If Not materialInfoDict.Exists(materialCodeKey) Then materialInfoDict.Add materialCodeKey, arrData
    Next iLng
End Sub
Private Sub LoadOutsourcingInfo()
    Set outsourcingInfoDict = CreateObject("Scripting.Dictionary")
    Dim wsOutsource As Worksheet, lastRow As Long, iLng As Long, outsourceKey As String, supplierName As String
    On Error Resume Next
    Set wsOutsource = ThisWorkbook.Sheets(SHEET_KOUTEI_TIMES)
    On Error GoTo 0
    If wsOutsource Is Nothing Then Exit Sub
    lastRow = wsOutsource.Cells(wsOutsource.Rows.Count, COL_OUTSOURCE_KEY).End(xlUp).Row
    For iLng = 2 To lastRow
        outsourceKey = UCase(Trim(CStr(wsOutsource.Cells(iLng, COL_OUTSOURCE_KEY).Value)))
        supplierName = Trim(CStr(wsOutsource.Cells(iLng, COL_OUTSOURCE_NAME).Value))
        If outsourceKey <> "" Then If Not outsourcingInfoDict.Exists(outsourceKey) Then outsourcingInfoDict.Add outsourceKey, supplierName
    Next iLng
End Sub

Private Function GetProcessTimes(baseProcessName As String, Optional detailSuffix As String = "") As Variant
    Dim lookupKey As String: lookupKey = Trim(baseProcessName)
    If Trim(detailSuffix) <> "" Then lookupKey = lookupKey & "-" & Trim(detailSuffix)
    If processTimesDict Is Nothing Then GetProcessTimes = False: Exit Function
    If processTimesDict.Exists(lookupKey) Then GetProcessTimes = processTimesDict(lookupKey) Else GetProcessTimes = False
End Function
Private Function GetOutsourcingSupplierName(ByVal outsourcingKey As String) As String
    Dim normalizedKey As String: normalizedKey = UCase(Trim(outsourcingKey))
    If outsourcingInfoDict Is Nothing Then GetOutsourcingSupplierName = "": Exit Function
    If outsourcingInfoDict.Exists(normalizedKey) Then GetOutsourcingSupplierName = CStr(outsourcingInfoDict(normalizedKey)) Else GetOutsourcingSupplierName = ""
End Function
Private Function GetMaterialName(ByVal materialCodeInputPreview As String) As String
    Dim normalizedCode As String: normalizedCode = UCase(Trim(materialCodeInputPreview))
    If materialInfoDict Is Nothing Then GetMaterialName = "": Exit Function
    If materialInfoDict.Exists(normalizedCode) Then GetMaterialName = normalizedCode Else GetMaterialName = ""
End Function
Private Sub ParseZColumnInfo(ByVal zValuePreview As String, ByRef outCoatingTypeKey As String, ByRef outHasSubZero As Boolean, ByRef outNeedsOutsourcing As Boolean, ByRef outNeedsPolishing As Boolean)
    Dim normalizedZ As String: normalizedZ = NormalizeZText(zValuePreview)
    outCoatingTypeKey = "": outHasSubZero = False: outNeedsOutsourcing = False: outNeedsPolishing = False
    If InStr(normalizedZ, "ALCRN") > 0 Then outCoatingTypeKey = "COATING_ALCRN": outNeedsOutsourcing = True: outNeedsPolishing = True
    If InStr(normalizedZ, "TICN") > 0 Then outCoatingTypeKey = "COATING_TICN": outNeedsOutsourcing = True: outNeedsPolishing = True
    If InStr(normalizedZ, "DNF") > 0 Then outCoatingTypeKey = "COATING_DNF": outNeedsOutsourcing = True: outNeedsPolishing = True
    If InStr(normalizedZ, "SUB0") > 0 Or InStr(normalizedZ, "ｻﾌﾞ0") > 0 Or InStr(normalizedZ, "S0") > 0 Then outHasSubZero = True
End Sub
Private Function NormalizeZText(src As String) As String
    Dim t As String: t = StrConv(src, vbNarrow + vbKatakana): t = UCase(t)
    t = Replace(t, " ", ""): t = Replace(t, "　", ""): t = Replace(t, "COATING", ""): t = Replace(t, "ｺｰﾃｨﾝｸﾞ", ""): t = Replace(t, "コーティング", "")
    t = Replace(t, "ｾﾞﾛ", "0"): t = Replace(t, "ゼロ", "0"): t = Replace(t, "ZERO", "0"): NormalizeZText = t
End Function
Private Function GetShapeFromOptionButtons() As String
    If Me.OptionButton5.Value Then
    GetShapeFromOptionButtons = "プレート"
    ElseIf Me.OptionButton6.Value Then GetShapeFromOptionButtons = "ファミリー加工"
    Else: GetShapeFromOptionButtons = "ブロック"
    End If
End Function

Private Sub CommandButton1_Click()
    Dim ws As Worksheet
    Dim targetRow As Long
    Dim currentRow As Long
    Dim i As Long ' ループカウンター

    Application.ScreenUpdating = False
    On Error GoTo ErrorHandler

    ' 対象シートと開始行の検証 (この部分は元のコードと同じです)
    Set ws = ThisWorkbook.Sheets(SHEET_KOUTEIHYO)
    If Not ValidateActiveCell(ws, targetRow) Then GoTo Finally
    currentRow = targetRow ' 最初の書き込み行をセット

    '-----------------------------------------------------------------------
    ' ★★★ ここから下のロジックが、配列ベースの出力に変更されています ★★★
    '
    ' 従来のオプション読み取りや、それに基づく分岐処理 (ProcessOutsourcedProduct, ProcessMisumiPurchaseなど) は
    ' m_arrPreviewProcesses 配列に既にデータが格納されているため、このサブルーチン内では不要になりました。
    '
    '-----------------------------------------------------------------------

    ' m_arrPreviewProcesses 配列にデータがあるか確認
    If m_lPreviewProcessCount > 0 Then
        ' 配列の最初から最後までループして、各工程情報をシートに書き込む
        For i = 0 To m_lPreviewProcessCount - 1
            ' 既存の AddProcessToSheet サブルーチンを呼び出してシートに書き込みます。
            ' AddProcessToSheet の第3引数 initialTargetRow には、targetRow を渡します。
            Call AddProcessToSheet( _
                ws, _
                currentRow, _
                targetRow, _
                m_arrPreviewProcesses(i).ProcessName, _
                m_arrPreviewProcesses(i).Supplier, _
                m_arrPreviewProcesses(i).MaeDandoriTime, _
                m_arrPreviewProcesses(i).YujinTime, _
                m_arrPreviewProcesses(i).MachineTime, _
                m_arrPreviewProcesses(i).GoDandoriTime, _
                m_arrPreviewProcesses(i).Bikou _
            )
            ' currentRow は AddProcessToSheet サブルーチン内で
            ' ByRef参照渡しにより、次の行を指すようにインクリメントされる想定です。
            ' (元の AddProcessToSheet の実装がそうなっていることを確認済みです)
        Next i
        MsgBox "工程作成が完了しました。", vbInformation
    Else
        ' 出力する工程データがない場合
        MsgBox "プレビューに表示されている工程がありません。出力処理を中断します。", vbExclamation
        GoTo Finally ' 何もせず終了
    End If

Finally:
    Application.ScreenUpdating = True
    Unload Me ' フォームを閉じる
    Exit Sub

ErrorHandler:
    MsgBox "エラー発生: " & Err.Number & " - " & Err.Description, vbCritical
    Resume Finally ' エラー発生時も Finally を通って終了
End Sub


Private Function ValidateActiveCell(ByVal targetSheet As Worksheet, ByRef outTargetRow As Long) As Boolean
    ValidateActiveCell = False
    If TypeName(ActiveSheet) <> "Worksheet" Or ActiveSheet.name <> targetSheet.name Then MsgBox "「" & targetSheet.name & "」シートをアクティブにして、開始セルを選択してください。", vbExclamation: Exit Function
    If TypeName(Selection) <> "Range" Then MsgBox "開始セルを選択してください。", vbExclamation: Exit Function
    If Selection.Cells.CountLarge <> 1 Then MsgBox "開始セルを一つだけ選択してください。", vbExclamation: Exit Function
    outTargetRow = ActiveCell.Row: ValidateActiveCell = True
End Function

Private Sub CommandButton単品挿入_Click()
    Dim sProcessName As String
    Dim processDataTimes As Variant ' GetProcessTimes から返される工数・備考データ
    Dim sMaeDandori As String
    Dim sYujinTime As String
    Dim sMachineTime As String
    Dim sGoDandoriTime As String
    Dim sBikou As String

    ' ComboBoxから選択された工程名を取得
    sProcessName = Me.ComboBox工程選択.Value
    If sProcessName = "" Then
        MsgBox "工程をリストから選択してください。", vbExclamation
        Exit Sub
    End If

    ' 選択された工程の工数・備考情報をマスターデータから取得
    processDataTimes = GetProcessTimes(sProcessName)

    ' GetProcessTimesが適切な配列を返したか確認
    If IsArray(processDataTimes) Then
        ' processDataTimes 配列のインデックスは0から始まる想定
        ' 0: 前段取, 1: 有人, 2: 機械, 3: 後段取, 4: 備考 (シート2のF列), 5: 詳細備考 (シート2のG列)
        sMaeDandori = CStr(processDataTimes(0))
        sYujinTime = CStr(processDataTimes(1))
        sMachineTime = CStr(processDataTimes(2))
        sGoDandoriTime = CStr(processDataTimes(3))
        sBikou = CStr(processDataTimes(4)) ' シート2のF列の備考を使用
    Else
        ' マスターに工数情報が見つからない場合でも、工程名だけで追加する
        sMaeDandori = ""
        sYujinTime = ""
        sMachineTime = ""
        sGoDandoriTime = ""
        sBikou = "※工数/備考未設定"
    End If

    ' プレビュー用の内部配列 m_arrPreviewProcesses に新しい工程データを追加
    ' (既存の AddItemToPreviewList サブルーチンを呼び出します。このサブルーチンは
    '  既に m_arrPreviewProcesses 配列への追加と m_lPreviewProcessCount の更新を行います)
' 単品挿入では業者は空、または別途指定する方法を検討
Call AddItemToPreviewList( _
    procName:=sProcessName, _
    Supplier:="", _
    maeD:=sMaeDandori, _
    yujin:=sYujinTime, _
    machine:=sMachineTime, _
    goD:=sGoDandoriTime, _
    remark:=sBikou _
)


    ' リストボックスの表示を、更新された m_arrPreviewProcesses 配列の内容で再描画
    Call RefreshListBoxFromInternalArray

    MsgBox "工程「" & sProcessName & "」をプレビューの末尾に追加しました。", vbInformation

    ' --- 以下は旧コードからの削除または変更点 ---
    ' Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(SHEET_KOUTEIHYO) や
    ' Dim r As Long: If Not ValidateActiveCell(ws, r) Then Exit Sub は不要になります。
    ' ws.Rows(r).Insert や ws.Cells(r, COL_KOUTEI).Value = 工程名 といった
    ' シートへの直接書き込み処理も全て不要になります。
    ' Application.ScreenUpdating の制御も、シート操作がなくなったため不要です。
    ' エラーハンドリングは、GetProcessTimes の結果判定でカバーされる部分が多くなりますが、
    ' 必要に応じて残すか、よりシンプルな形にできます。今回は上記のようにしています。

End Sub
Private Sub CommandButton2_Click()
    ' (元のコードのまま)
    MsgBox "CommandButton2_Click: (元のコードを参照)"
End Sub
Private Function ReplaceCharsForSheetName(ByVal name As String) As String
    ' (元のコードのまま)
    ReplaceCharsForSheetName = name
End Function

' === 元のAddProcessToSheet と Process... 系サブルーチン群 ===
' これらは CommandButton1_Click から呼び出されるため、元のまま残します。
' ここでは宣言のみ、または主要なもののみ簡略化して記載します。
' 実際の運用では元のコード全体が必要です。

Private Sub AddProcessToSheet(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, ProcessName As String, Optional Supplier As String = "", Optional MaeDandoriTime As Variant = "", Optional YujinTime As Variant = "", Optional MachineTime As Variant = "", Optional GoDandoriTime As Variant = "", Optional memo As String = "")
   If currentRow > initialTargetRow Then
    ws.Rows(currentRow).Insert Shift:=xlDown
ElseIf ws.Cells(currentRow, COL_KOUTEI).Value <> "" Or ws.Cells(currentRow, COL_JINKAN_YUJIN).Value <> "" Then
    ws.Rows(currentRow).Insert Shift:=xlDown
End If

    If ProcessName <> "" Then ws.Cells(currentRow, COL_KOUTEI).Value = ProcessName
    If Supplier <> "" Then ws.Cells(currentRow, COL_GYOUSHA).Value = Supplier
    If Not IsEmpty(MaeDandoriTime) And MaeDandoriTime <> "" Then ws.Cells(currentRow, COL_MAE_DANDORI_OUTPUT).Value = MaeDandoriTime
    If Not IsEmpty(YujinTime) And YujinTime <> "" Then ws.Cells(currentRow, COL_JINKAN_YUJIN).Value = YujinTime
    If Not IsEmpty(MachineTime) And MachineTime <> "" Then ws.Cells(currentRow, COL_JINKAN_MACHINE).Value = MachineTime
    If Not IsEmpty(GoDandoriTime) And GoDandoriTime <> "" Then ws.Cells(currentRow, COL_JINKAN_SETUP).Value = GoDandoriTime
    If memo <> "" Then ws.Cells(currentRow, COL_BIKOU).Value = memo
    currentRow = currentRow + 1
End Sub
Private Sub ProcessOutsourcedProduct(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, coatingTypeKeyCmd As String, needsOutsourcingForCoatingCmd As Boolean, needsAdjustPCmd As Boolean, outsourcedProductSupplierName As String)
    Call AddProcessToSheet(ws, currentRow, initialTargetRow, "外注", outsourcedProductSupplierName)
    If needsOutsourcingForCoatingCmd And coatingTypeKeyCmd <> "" Then
        Dim coatingSupplierName As String: coatingSupplierName = GetOutsourcingSupplierName(coatingTypeKeyCmd)
        If coatingSupplierName <> "" Then Call AddProcessToSheet(ws, currentRow, initialTargetRow, "外注", coatingSupplierName, , , , , "コーティング")
        Else: Debug.Print "ProcessOutsourcedProduct Warning: Coating supplier not found for key '" & coatingTypeKeyCmd & "'"
        End If
    End If
    Call AddAdjustPProcess(ws, currentRow, initialTargetRow, needsAdjustPCmd) ' これは元の AddAdjustPProcess
End Sub
' --- 4-2. ミスミ購入品のみの場合 ---
Private Sub ProcessMisumiPurchase(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                                  hasAdditionalProcessing As Boolean, additionalProcessName As String, needsAdjustP As Boolean)
    Call AddProcessToSheet(ws, currentRow, initialTargetRow, "副材(購入品)", "ﾐｽﾐ")
    If hasAdditionalProcessing Then
        Dim times As Variant
        Dim remarksFromSheetF As String
        
        Debug.Print "ProcessMisumiPurchase: additionalProcessName (ComboBox3.Value) = '" & additionalProcessName & "'"
        times = GetProcessTimes(additionalProcessName)

        If IsArray(times) Then
            remarksFromSheetF = CStr(times(4))
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, additionalProcessName, , times(0), times(1), times(2), times(3), remarksFromSheetF)
            Debug.Print "ProcessMisumiPurchase: Data applied for '" & additionalProcessName & "'"
        Else
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, additionalProcessName, , "", "", "", "", "※工数/備考未設定:" & additionalProcessName)
            Debug.Print "ProcessMisumiPurchase: Data NOT FOUND for '" & additionalProcessName & "'"
        End If
    End If
    Call AddAdjustPProcess(ws, currentRow, initialTargetRow, needsAdjustP)
End Sub

' --- 4-3. レイアウト切り離し後部品の場合 (修正) ---
Private Sub ProcessLayoutAfterCut(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                                needsPolishing As Boolean, hasCuttingEdge As Boolean, _
                                needsOutsourcingForCoating As Boolean, coatingTypeKey As String, needsAdjustP As Boolean, _
                                hasTsubaProcessing As Boolean, tsubaCount As Integer, tsubaRoughMethod As String, _
                                kataboriChoosenByUserAsLayout As Boolean, naraiKensakuChoosenByUserAsLayout As Boolean, _
                                useAfterMCAsLayout As Boolean, shapeForMC As String) '★ coatingType を coatingTypeKey に変更
    Dim specificMemo As String
    Dim times As Variant
    Dim processKeyDetail As String
    Dim remarksFromSheetF As String

    If hasCuttingEdge Then
        If hasTsubaProcessing Or kataboriChoosenByUserAsLayout Or needsPolishing Then specificMemo = "ﾍｿ取り" Else specificMemo = "ﾍｿ取り・上面"
    Else
        specificMemo = "ﾍｿ取り"
    End If
    processKeyDetail = IIf(specificMemo = "ﾍｿ取り・上面", "レイアウト後ヘソ上面", "レイアウト後ヘソ取り")
    times = GetProcessTimes("平面研削 汎用", processKeyDetail)
    If IsArray(times) Then
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "平面研削 汎用", , times(0), times(1), times(2), times(3), specificMemo)
    Else
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "平面研削 汎用", , "", "0.1", , "0.2", specificMemo & " (※工数未設定)")
    End If

    If useAfterMCAsLayout Then
        Dim mcProcessNameLayout As String
        mcProcessNameLayout = IIf(shapeForMC = "プレート", "M/C（大）", "M/C（小）")
        times = GetProcessTimes(mcProcessNameLayout, "レイアウト後MC")
        If IsArray(times) Then
            remarksFromSheetF = CStr(times(4))
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, mcProcessNameLayout, , times(0), times(1), times(2), times(3), remarksFromSheetF)
        Else
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, mcProcessNameLayout, , "", "", "", "", "※工数/備考未設定:" & mcProcessNameLayout & "-レイアウト後MC")
        End If
    End If

If hasTsubaProcessing Then Call AddTsubaProcessing(ws, currentRow, initialTargetRow, tsubaCount, tsubaRoughMethod, needsPolishing, kataboriChoosenByUserAsLayout, hasCuttingEdge)
    If naraiKensakuChoosenByUserAsLayout Then
        times = GetProcessTimes("倣い研削", "レイアウト後")
        If IsArray(times) Then
             remarksFromSheetF = CStr(times(4))
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "倣い研削", , times(0), times(1), times(2), times(3), remarksFromSheetF)
        Else
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "倣い研削", , "", "1.0", "", "0.2", "※工数/備考未設定")
        End If
    End If

    If kataboriChoosenByUserAsLayout Then
        times = GetProcessTimes("型彫放電加工", "レイアウト後")
        If IsArray(times) Then
            remarksFromSheetF = CStr(times(4))
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "型彫放電加工", , times(0), times(1), times(2), times(3), remarksFromSheetF)
        Else
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "型彫放電加工", , "", "0.5", "1.5", "0.2", "※工数/備考未設定")
        End If
        If hasCuttingEdge And Not needsPolishing Then
            times = GetProcessTimes("平面研削 NC", "レイアウト後上面")
            If IsArray(times) Then
                Call AddProcessToSheet(ws, currentRow, initialTargetRow, "平面研削 NC", , times(0), times(1), times(2), times(3), "上面")
            Else
                Call AddProcessToSheet(ws, currentRow, initialTargetRow, "平面研削 NC", , "", "0.2", "0.2", "0.1", "上面 (※工数未設定)")
            End If
        End If
    End If

    Call AddPolishingAndCoating(ws, currentRow, initialTargetRow, needsPolishing, hasCuttingEdge, needsOutsourcingForCoating, coatingTypeKey) '★ coatingTypeKey を使用
    Call AddAdjustPProcess(ws, currentRow, initialTargetRow, needsAdjustP)
End Sub
Private Sub ProcessGeibiOutsource(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, materialCodeActual As String, geibiPatternCmd As String, hasSubZeroCmd As Boolean, shapeCmd As String, useWireEDMCmd As Boolean, isDia10OrLessCmd As Boolean, hasShapeProcessingCmd As Boolean, hasCuttingEdgeCmd As Boolean, useAfterMCCmd As Boolean, useSmallStartHoleCmd As Boolean, hasTsubaProcessingCmd As Boolean, tsubaCountCmd As Integer, tsubaRoughMethodCmd As String, needsPolishingCmd As Boolean, needsOutsourcingForCoatingCmd As Boolean, coatingTypeKeyCmd As String, needsAdjustPCmd As Boolean, noChamferCmd As Boolean, hasLiftingScrewCmd As Boolean, kataboriChoosenByUserCmd As Boolean, naraiKensakuChoosenByUserCmd As Boolean, isSingleMCPreHeatCmd As Boolean, isTripleMCPreHeatCmd As Boolean, autoSgCountCmd As Boolean, userSgCountCmd As Integer)
    Dim geibiSupplierName As String: geibiSupplierName = GetOutsourcingSupplierName("GEIBI"): If geibiSupplierName = "" Then geibiSupplierName = "ｹﾞｲﾋﾞ鋼業"
    Select Case geibiPatternCmd
        Case "材料～焼きまで": Call AddProcessToSheet(ws, currentRow, initialTargetRow, "外注", geibiSupplierName, , , , , geibiPatternCmd): Call AddPostHeatTreatmentProcesses(ws, currentRow, initialTargetRow, materialCodeActual, shapeCmd, useWireEDMCmd, isDia10OrLessCmd, hasShapeProcessingCmd, hasCuttingEdgeCmd, useAfterMCCmd, useSmallStartHoleCmd, hasTsubaProcessingCmd, tsubaCountCmd, tsubaRoughMethodCmd, needsPolishingCmd, needsOutsourcingForCoatingCmd, coatingTypeKeyCmd, needsAdjustPCmd, kataboriChoosenByUserCmd, naraiKensakuChoosenByUserCmd, autoSgCountCmd, userSgCountCmd)
        Case "荒加工のみ": Call AddMaterialPurchase(ws, currentRow, initialTargetRow, materialCodeActual, noChamferCmd, hasLiftingScrewCmd): Call AddProcessToSheet(ws, currentRow, initialTargetRow, "外注", geibiSupplierName, , , , , geibiPatternCmd): Call AddTapHole(ws, currentRow, initialTargetRow, hasSubZeroCmd): If Not (materialCodeActual = "NAK80" Or materialCodeActual = "FDAC" Or materialCodeActual = "SS400") Then Call AddHeatTreatment(ws, currentRow, initialTargetRow, materialCodeActual, hasSubZeroCmd): Call AddPostHeatTreatmentProcesses(ws, currentRow, initialTargetRow, materialCodeActual, shapeCmd, useWireEDMCmd, isDia10OrLessCmd, hasShapeProcessingCmd, hasCuttingEdgeCmd, useAfterMCCmd, useSmallStartHoleCmd, hasTsubaProcessingCmd, tsubaCountCmd, tsubaRoughMethodCmd, needsPolishingCmd, needsOutsourcingForCoatingCmd, coatingTypeKeyCmd, needsAdjustPCmd, kataboriChoosenByUserCmd, naraiKensakuChoosenByUserCmd, autoSgCountCmd, userSgCountCmd)
        Case "荒～焼きまで": Call AddMaterialPurchase(ws, currentRow, initialTargetRow, materialCodeActual, noChamferCmd, hasLiftingScrewCmd): Call AddProcessToSheet(ws, currentRow, initialTargetRow, "外注", geibiSupplierName, , , , , geibiPatternCmd): Call AddPostHeatTreatmentProcesses(ws, currentRow, initialTargetRow, materialCodeActual, shapeCmd, useWireEDMCmd, isDia10OrLessCmd, hasShapeProcessingCmd, hasCuttingEdgeCmd, useAfterMCCmd, useSmallStartHoleCmd, hasTsubaProcessingCmd, tsubaCountCmd, tsubaRoughMethodCmd, needsPolishingCmd, needsOutsourcingForCoatingCmd, coatingTypeKeyCmd, needsAdjustPCmd, kataboriChoosenByUserCmd, naraiKensakuChoosenByUserCmd, autoSgCountCmd, userSgCountCmd)
    End Select
End Sub
Private Sub ProcessNormalRoute(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, materialCodeActual As String, hasSubZeroCmd As Boolean, shapeCmd As String, useWireEDMCmd As Boolean, isDia10OrLessCmd As Boolean, hasShapeProcessingCmd As Boolean, hasCuttingEdgeCmd As Boolean, useAfterMCCmd As Boolean, useSmallStartHoleCmd As Boolean, hasTsubaProcessingCmd As Boolean, tsubaCountCmd As Integer, tsubaRoughMethodCmd As String, needsPolishingCmd As Boolean, needsOutsourcingForCoatingCmd As Boolean, coatingTypeKeyCmd As String, needsAdjustPCmd As Boolean, noChamferCmd As Boolean, hasLiftingScrewCmd As Boolean, kataboriChoosenByUserCmd As Boolean, naraiKensakuChoosenByUserCmd As Boolean, isSingleMCPreHeatCmd As Boolean, isTripleMCPreHeatCmd As Boolean, autoSgCountCmd As Boolean, userSgCountCmd As Integer)
    Call AddMaterialPurchase(ws, currentRow, initialTargetRow, materialCodeActual, noChamferCmd, hasLiftingScrewCmd)
    Call AddMCBeforeHeatTreatment(ws, currentRow, initialTargetRow, shapeCmd, isSingleMCPreHeatCmd, isTripleMCPreHeatCmd)
    Call AddTapHole(ws, currentRow, initialTargetRow, hasSubZeroCmd)
    If Not (materialCodeActual = "NAK80" Or materialCodeActual = "FDAC" Or materialCodeActual = "SS400") Then Call AddHeatTreatment(ws, currentRow, initialTargetRow, materialCodeActual, hasSubZeroCmd)
    Call AddPostHeatTreatmentProcesses(ws, currentRow, initialTargetRow, materialCodeActual, shapeCmd, useWireEDMCmd, isDia10OrLessCmd, hasShapeProcessingCmd, hasCuttingEdgeCmd, useAfterMCCmd, useSmallStartHoleCmd, hasTsubaProcessingCmd, tsubaCountCmd, tsubaRoughMethodCmd, needsPolishingCmd, needsOutsourcingForCoatingCmd, coatingTypeKeyCmd, needsAdjustPCmd, kataboriChoosenByUserCmd, naraiKensakuChoosenByUserCmd, autoSgCountCmd, userSgCountCmd)
End Sub

' --- 元の Add... 系サブルーチン (AddProcessToSheetから呼び出されるもの) ---
Private Sub AddAdjustPProcess(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, needsAdjustPCmd As Boolean)
    If needsAdjustPCmd Then
        Dim times As Variant: times = GetProcessTimes("調整（P）")
If IsArray(times) Then
    Call AddProcessToSheet(ws, currentRow, initialTargetRow, "調整（P）", , times(0), times(1), times(2), times(3), CStr(times(4)))
Else
    Call AddProcessToSheet(ws, currentRow, initialTargetRow, "調整（P）", , "", "", "", "", "※工数/備考未設定")
End If

    End If
End Sub
Private Sub AddMaterialPurchase(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, materialCodeActual As String, noChamferCmd As Boolean, hasLiftingScrewCmd As Boolean)
    ' (元のコードを参照)
    Dim Supplier As String, materialData As Variant, normalizedMaterialCode As String, specificMemo As String
    normalizedMaterialCode = UCase(Trim(materialCodeActual))
    If materialInfoDict Is Nothing Or Not materialInfoDict.Exists(normalizedMaterialCode) Then Supplier = "" Else materialData = materialInfoDict(normalizedMaterialCode): Supplier = CStr(materialData(0))
    specificMemo = IIf(noChamferCmd, "Cなし", "Cあり"): If hasLiftingScrewCmd Then specificMemo = specificMemo & ",吊り"
    Call AddProcessToSheet(ws, currentRow, initialTargetRow, "主材購入", Supplier, , , , , specificMemo)
End Sub
Private Sub AddMCBeforeHeatTreatment(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, shapeCmd As String, reduceToOneStepCmd As Boolean, increaseToThreeStepsCmd As Boolean)
    ' (元のコードを参照)
    Dim mcProcessName As String: mcProcessName = IIf(shapeCmd = "プレート", "M/C（大）", "M/C（小）")
    Dim i As Integer, times As Variant, maeDandori As String, yTime As String, mTime As String, sTimeBase As String, sTimeFinal As String, loopCount As Integer, specificMemo As String
    times = GetProcessTimes(mcProcessName, "熱処理前")
    If IsArray(times) Then maeDandori = CStr(times(0)): yTime = CStr(times(1)): mTime = CStr(times(2)): sTimeBase = CStr(times(3)) Else maeDandori = "": yTime = "0.25": mTime = "0.1": sTimeBase = "0.1"
    If increaseToThreeStepsCmd Then
    loopCount = 3
ElseIf reduceToOneStepCmd Then
    loopCount = 1
Else
    loopCount = 2
End If

    For i = 1 To loopCount: sTimeFinal = IIf(i = loopCount, sTimeBase, ""): specificMemo = i & "/" & loopCount: Call AddProcessToSheet(ws, currentRow, initialTargetRow, mcProcessName, , maeDandori, yTime, mTime, sTimeFinal, specificMemo): Next i
End Sub
Private Sub AddTapHole(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, hasSubZeroCmd As Boolean)
    Dim specificMemo As String, remarksFromSheetF As String, finalMemo As String, times As Variant, MaeDandoriTime As String

    If hasSubZeroCmd Then
        specificMemo = "ｻﾌﾞｾﾞﾛ注意"
    Else
        specificMemo = ""
    End If

    times = GetProcessTimes("穴あけﾀｯﾌﾟ")
    
    If IsArray(times) Then
        MaeDandoriTime = CStr(times(0))
        remarksFromSheetF = CStr(times(4))
        
        If specificMemo <> "" Then
            finalMemo = specificMemo
        Else
            finalMemo = remarksFromSheetF
        End If

        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "穴あけﾀｯﾌﾟ", , MaeDandoriTime, times(1), times(2), times(3), finalMemo)
    Else
        finalMemo = specificMemo & IIf(specificMemo <> "", " ", "") & "(※工数/備考未設定)"
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "穴あけﾀｯﾌﾟ", , "", "0.3", , , finalMemo)
    End If
End Sub

Private Sub AddHeatTreatment(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, materialCodeActual As String, hasSubZeroCmd As Boolean)
    Dim Supplier As String, materialData As Variant, normalizedMaterialCode As String
    normalizedMaterialCode = UCase(Trim(materialCodeActual))
    
    If materialInfoDict Is Nothing Or Not materialInfoDict.Exists(normalizedMaterialCode) Then
        Supplier = ""
        
        If hasSubZeroCmd Then
            Supplier = GetOutsourcingSupplierName("HEAT_SUBZERO_DEFAULT")
            If Supplier = "" Then
                Supplier = "ｴｼﾞｿﾝ熱処理"
            End If
        End If

    Else
        materialData = materialInfoDict(normalizedMaterialCode)
        
        If hasSubZeroCmd Then
            Supplier = CStr(materialData(2))
            If Supplier = "" Then
                Supplier = GetOutsourcingSupplierName("HEAT_SUBZERO_DEFAULT")
                If Supplier = "" Then
                    Supplier = "ｴｼﾞｿﾝ熱処理"
                End If
            End If
        Else
            Supplier = CStr(materialData(1))
        End If

    End If

    If Supplier <> "" Then
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "熱処理", Supplier, , , , , IIf(hasSubZeroCmd, "サブゼロ有", ""))
    ElseIf hasSubZeroCmd And Supplier = "" Then
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "熱処理", GetOutsourcingSupplierName("HEAT_SUBZERO_DEFAULT"), , , , , "サブゼロ有")
    End If

End Sub

Private Sub AddPostHeatTreatmentProcesses(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, materialCodeActual As String, shapeCmd As String, useWireEDMCmd As Boolean, isDia10OrLessCmd As Boolean, hasShapeProcessingCmd As Boolean, hasCuttingEdgeCmd As Boolean, useAfterMCCmd As Boolean, useSmallStartHoleCmd As Boolean, hasTsubaProcessingCmd As Boolean, tsubaCountCmd As Integer, tsubaRoughMethodCmd As String, needsPolishingCmd As Boolean, needsOutsourcingForCoatingCmd As Boolean, coatingTypeKeyCmd As String, needsAdjustPCmd As Boolean, kataboriChoosenByUserCmd As Boolean, naraiKensakuChoosenByUserCmd As Boolean, autoSgCountCmd As Boolean, userSgCountCmd As Integer)
    
    ' Dim skipPostHeatProcesses As Boolean: skipPostHeatProcesses = (materialCodeActual = "NAK80" Or materialCodeActual = "FDAC" Or materialCodeActual = "SS400") ' ← この行を削除
    
    ' If Not skipPostHeatProcesses Then  ' ← このIf文の開始行を削除またはコメントアウト
    
        Call AddPostHeatTreatmentSG(ws, currentRow, initialTargetRow, shapeCmd, useWireEDMCmd, useAfterMCCmd, autoSgCountCmd, userSgCountCmd)
        If useAfterMCCmd Then Call AddAfterMCFinish(ws, currentRow, initialTargetRow, shapeCmd)
        If useWireEDMCmd And useSmallStartHoleCmd Then Call AddSmallStartHole(ws, currentRow, initialTargetRow)
        If useWireEDMCmd Then
            Call AddWireEDMProcessing(ws, currentRow, initialTargetRow, isDia10OrLessCmd, hasShapeProcessingCmd, (shapeCmd = "ファミリー加工"))
            Call AddPostWireEDMGrinding(ws, currentRow, initialTargetRow, shapeCmd, needsPolishingCmd, hasCuttingEdgeCmd, hasTsubaProcessingCmd, kataboriChoosenByUserCmd)
        End If
        If hasTsubaProcessingCmd Then Call AddTsubaProcessing(ws, currentRow, initialTargetRow, tsubaCountCmd, tsubaRoughMethodCmd, needsPolishingCmd, kataboriChoosenByUserCmd, hasCuttingEdgeCmd)
        If naraiKensakuChoosenByUserCmd Then Call AddNaraiKensaku(ws, currentRow, initialTargetRow)
        If kataboriChoosenByUserCmd Then Call AddKataboriHouden(ws, currentRow, initialTargetRow, hasCuttingEdgeCmd, needsPolishingCmd)
        Call AddPolishingAndCoating(ws, currentRow, initialTargetRow, needsPolishingCmd, hasCuttingEdgeCmd, needsOutsourcingForCoatingCmd, coatingTypeKeyCmd)
        
    ' End If ' ← このIf文の終了行を削除またはコメントアウト

    Call AddAdjustPProcess(ws, currentRow, initialTargetRow, needsAdjustPCmd)
End Sub

' --- 倣い研削工程を追加する ---
Private Sub AddNaraiKensaku(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long)
    Dim times As Variant
    Dim remarksFromSheetF As String
    Dim MaeDandoriTime As String

    times = GetProcessTimes("倣い研削")

    If IsArray(times) Then
        MaeDandoriTime = CStr(times(0))
        remarksFromSheetF = CStr(times(4))
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "倣い研削", , MaeDandoriTime, times(1), times(2), times(3), remarksFromSheetF)
    Else
        ' 工数情報がない場合はデフォルト値で挿入
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "倣い研削", , "", "1.0", "", "0.2", "※工数/備考未設定")
    End If
End Sub
Private Sub AddKataboriHouden(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, hasCuttingEdge As Boolean, needsPolishing As Boolean)
    Dim times As Variant
    Dim remarksFromSheetF As String
    Dim specificMemo As String
    Dim maeDandori As String, yujin As String, machine As String, setup As String

    times = GetProcessTimes("型彫放電加工")
    If IsArray(times) Then
        maeDandori = CStr(times(0))
        yujin = CStr(times(1))
        machine = CStr(times(2))
        setup = CStr(times(3))
        remarksFromSheetF = CStr(times(4))
    Else
        maeDandori = ""
        yujin = "0.5"
        machine = "1.5"
        setup = "0.2"
        remarksFromSheetF = "※工数/備考未設定"
    End If

    ' 型彫放電加工を1工程挿入
    Call AddProcessToSheet(ws, currentRow, initialTargetRow, "型彫放電加工", , maeDandori, yujin, machine, setup, remarksFromSheetF)

    ' 必要なら上面SGを追加
    If hasCuttingEdge And Not needsPolishing Then
        specificMemo = "上面"
        times = GetProcessTimes("平面研削 NC", "上面後")
        If IsArray(times) Then
            maeDandori = CStr(times(0))
            yujin = CStr(times(1))
            machine = CStr(times(2))
            setup = CStr(times(3))
        Else
            maeDandori = ""
            yujin = "0.2"
            machine = "0.2"
            setup = "0.1"
        End If
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "平面研削 NC", , maeDandori, yujin, machine, setup, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
    End If
End Sub
' --- 焼き入れ後SG (平面研削 NC) ---
Private Sub AddPostHeatTreatmentSG(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                                   shape As String, useWireEDM As Boolean, useAfterMC As Boolean, _
                                   autoSg As Boolean, userSgNum As Integer)
    Dim sgCount As Integer

    If autoSg Then
        Select Case shape
            Case "ブロック": sgCount = 6
            Case "プレート"
                If Not useWireEDM And useAfterMC Then
                sgCount = 4
                ElseIf Not useWireEDM Then sgCount = 2
                ElseIf useAfterMC Then sgCount = 4
                Else: sgCount = 3
                End If
            Case "ファミリー加工": sgCount = 2
            Case Else: sgCount = 3
        End Select
    Else
        sgCount = userSgNum
        If sgCount < 1 Or sgCount > 6 Then sgCount = 3
    End If

    Dim i As Integer
    Dim times As Variant
    Dim maeDandori As String, yTime As String, mTime As String, sTimeBase As String, sTimeFinal As String
    Dim specificMemo As String

    times = GetProcessTimes("平面研削 NC", "SG")
    If IsArray(times) Then
        maeDandori = CStr(times(0))
        yTime = CStr(times(1)): mTime = CStr(times(2)): sTimeBase = CStr(times(3))
    Else
        maeDandori = ""
        yTime = "0.3": mTime = "0.3": sTimeBase = "0.1"
    End If

    For i = 1 To sgCount
        sTimeFinal = IIf(i = sgCount, sTimeBase, "")
        specificMemo = i & "/" & sgCount
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "平面研削 NC", , maeDandori, yTime, mTime, sTimeFinal, specificMemo)
    Next i
End Sub

' --- 焼き後MC仕上げ ---
Private Sub AddAfterMCFinish(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, shape As String)
    Dim mcFinishName As String
    Dim maeDandori As String, yujin As String, machine As String, setup As String
    Dim times As Variant
    Dim finalMemo As String

    mcFinishName = IIf(shape = "プレート", "M/C（大）", "M/C（小）")
    times = GetProcessTimes(mcFinishName, "MC仕上げ")

    If IsArray(times) Then
        maeDandori = CStr(times(0))
        yujin = CStr(times(1)): machine = CStr(times(2)): setup = CStr(times(3))
        finalMemo = CStr(times(4))
        If finalMemo = "" Then finalMemo = "MC仕上げ"
    Else
        maeDandori = ""
        If shape = "プレート" Then yujin = "0.4": machine = "0.2": setup = "0.2" Else yujin = "0.25": machine = "0.1": setup = "0.1"
        finalMemo = "MC仕上げ (※工数/備考未設定)"
    End If

    Call AddProcessToSheet(ws, currentRow, initialTargetRow, mcFinishName, , maeDandori, yujin, machine, setup, finalMemo)
End Sub

' --- スタート穴 (細穴放電) ---
Private Sub AddSmallStartHole(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long)
    Dim times As Variant
    Dim remarksFromSheetF As String
    Dim MaeDandoriTime As String
    times = GetProcessTimes("細穴放電加工")
    If IsArray(times) Then
        MaeDandoriTime = CStr(times(0))
        remarksFromSheetF = CStr(times(4))
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "細穴放電加工", , MaeDandoriTime, times(1), times(2), times(3), remarksFromSheetF)
    Else
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "細穴放電加工", , "", "0.8", , "0.1", "※工数/備考未設定")
    End If
End Sub

' --- ワイヤー加工 ---
Private Sub AddWireEDMProcessing(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                                 isDia10OrLess As Boolean, hasShapeProcessing As Boolean, isFamilyProcessing As Boolean)
    Dim times As Variant
    Dim remarksFromSheetF As String
    Dim maeDandori As String, yTime As String, mTime As String, sTime As String
    Dim specificMemo As String

    If isFamilyProcessing Then
        ' === ファミリー加工の場合の処理を修正 ===
        If hasShapeProcessing Then ' CheckBox5 (形状加工あり) の状態を見る
            ' ファミリー加工 かつ 形状加工あり の場合は2工程
            specificMemo = "荒加工" ' ※ファミリー加工用の備考やキーが必要な場合は要調整
            times = GetProcessTimes("ﾜｲﾔ放電加工", "荒加工")
            If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "3": sTime = ""
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "ﾜｲﾔ放電加工", , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
            
            specificMemo = "ｶｽ取り・仕上げ" ' ※ファミリー加工用の備考やキーが必要な場合は要調整
            times = GetProcessTimes("ﾜｲﾔ放電加工", "ｶｽ取り・仕上げ")
            If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "6": sTime = "0.5"
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "ﾜｲﾔ放電加工", , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        Else
            ' ファミリー加工 かつ 形状加工なし の場合は1工程
            times = GetProcessTimes("ﾜｲﾔ放電加工")
            If IsArray(times) Then
                maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3): remarksFromSheetF = CStr(times(4))
            Else
                maeDandori = "": yTime = "0.75": mTime = "2": sTime = "0.5": remarksFromSheetF = "※工数/備考未設定"
            End If
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "ﾜｲﾔ放電加工", , maeDandori, yTime, mTime, sTime, remarksFromSheetF)
        End If
    ElseIf isDia10OrLess And hasShapeProcessing Then
        ' (変更なし) 2工程
        specificMemo = "荒加工"
        times = GetProcessTimes("ﾜｲﾔ放電加工", "荒加工")
        If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "3": sTime = ""
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "ﾜｲﾔ放電加工", , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        
        specificMemo = "ｶｽ取り・仕上げ"
        times = GetProcessTimes("ﾜｲﾔ放電加工", "ｶｽ取り・仕上げ")
        If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "6": sTime = "0.5"
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "ﾜｲﾔ放電加工", , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
    ElseIf isDia10OrLess Or Not hasShapeProcessing Then
        ' (変更なし) 1工程
        times = GetProcessTimes("ﾜｲﾔ放電加工")
        If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3): remarksFromSheetF = CStr(times(4)) Else maeDandori = "": yTime = "0.75": mTime = "2": sTime = "0.5": remarksFromSheetF = "※工数/備考未設定"
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "ﾜｲﾔ放電加工", , maeDandori, yTime, mTime, sTime, remarksFromSheetF)
    Else
        ' (変更なし) isFamilyProcessing=False AND isDia10OrLess=False AND hasShapeProcessing=True の場合 (2工程)
        specificMemo = "荒加工"
        times = GetProcessTimes("ﾜｲﾔ放電加工", "荒加工")
        If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "3": sTime = ""
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "ﾜｲﾔ放電加工", , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        
        specificMemo = "ｶｽ取り・仕上げ"
        times = GetProcessTimes("ﾜｲﾔ放電加工", "ｶｽ取り・仕上げ")
        If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "6": sTime = "0.5"
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "ﾜｲﾔ放電加工", , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
    End If
End Sub


' --- ヘソ取り or 上面SG (ワイヤー加工後) ---
Private Sub AddPostWireEDMGrinding(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                                   shape As String, needsPolishing As Boolean, hasCuttingEdge As Boolean, hasTsubaProcessing As Boolean, _
                                   kataboriChoosenByUserAsLaterStep As Boolean)
    Dim specificMemo As String
    Dim times As Variant
    Dim processKey As String, processKeyDetail As String
    Dim maeDandori As String, yTime As String, mTime As String, sTime As String

    If shape = "ファミリー加工" Then
        If needsPolishing Then
            processKey = "平面研削 汎用"
            processKeyDetail = "ファミリー後ヘソ取り"
            specificMemo = "ﾍｿ取り"
            times = GetProcessTimes(processKey, processKeyDetail)
            If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.2": mTime = "": sTime = "0.1"
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, processKey, , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        Else
            processKey = "平面研削 NC"
            specificMemo = "ﾍｿ取り"
            If hasCuttingEdge And Not hasTsubaProcessing And Not kataboriChoosenByUserAsLaterStep Then specificMemo = "ﾍｿ・上面"
            processKeyDetail = IIf(specificMemo = "ﾍｿ・上面", "ファミリー後ヘソ上面", "ファミリー後ヘソ取り")
            times = GetProcessTimes(processKey, processKeyDetail)
            If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.2": mTime = "0.3": sTime = "0.1"
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, processKey, , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        End If
    ElseIf shape = "ブロック" Or shape = "プレート" Then
        If hasCuttingEdge And Not needsPolishing Then
            Dim addThisSG As Boolean: addThisSG = True
            If kataboriChoosenByUserAsLaterStep Then addThisSG = False
            If addThisSG And hasTsubaProcessing Then
                If Not needsPolishing And Not kataboriChoosenByUserAsLaterStep Then addThisSG = False
            End If
            If addThisSG Then
                Dim grindingMachine As String
                grindingMachine = IIf(shape = "プレート", "平面研削 NC", "平面研削 汎用")
                specificMemo = "上面"
                times = GetProcessTimes(grindingMachine, "上面後")
                If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.2": mTime = IIf(grindingMachine = "平面研削 NC", "0.2", ""): sTime = "0.1"
                Call AddProcessToSheet(ws, currentRow, initialTargetRow, grindingMachine, , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
            End If
        End If
    End If
End Sub

' --- ツバ加工追加 (共通部品) ---
Private Sub AddTsubaProcessing(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                               tsubaCount As Integer, tsubaRoughMethod As String, needsPolishingForTsubaUe As Boolean, _
                               kataboriChoosenByUser As Boolean, ByVal hasCuttingEdgeAsParam As Boolean) '引数追加
    Dim n As Integer
    Dim isLastTsuba As Boolean
    Dim specificMemoRough As String, specificMemoFinish As String
    Dim timesRough As Variant, timesFinish As Variant
    Dim maeDandoriRough As String, yRough As String, mRough As String, sRough As String
    Dim maeDandoriFinish As String, yFinish As String, mFinish As String, sFinish As String

    timesRough = GetProcessTimes(tsubaRoughMethod, "つば荒")
    timesFinish = GetProcessTimes("平面研削 NC", "つば仕上げ")

    If IsArray(timesRough) Then maeDandoriRough = CStr(timesRough(0)): yRough = CStr(timesRough(1)): mRough = CStr(timesRough(2)): sRough = CStr(timesRough(3)) Else maeDandoriRough = "": yRough = "0.6": mRough = "0.1": sRough = "0.1"
    If IsArray(timesFinish) Then maeDandoriFinish = CStr(timesFinish(0)): yFinish = CStr(timesFinish(1)): mFinish = CStr(timesFinish(2)): sFinish = CStr(timesFinish(3)) Else maeDandoriFinish = "": yFinish = "0.3": mFinish = "0.1": sFinish = "0.1"

    For n = 1 To tsubaCount
        specificMemoRough = "つば荒 " & n & "/" & tsubaCount
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, tsubaRoughMethod, , maeDandoriRough, yRough, mRough, sRough, specificMemoRough & IIf(IsArray(timesRough), "", " (※工数未設定)"))

        isLastTsuba = (n = tsubaCount)
        specificMemoFinish = "つば仕上げ " & n & "/" & tsubaCount
        ' 「・上面」を追記する条件を修正
        If isLastTsuba And hasCuttingEdgeAsParam And Not needsPolishingForTsubaUe And Not kataboriChoosenByUser Then
            specificMemoFinish = specificMemoFinish & "・上面"
        End If
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "平面研削 NC", , maeDandoriFinish, yFinish, mFinish, sFinish, specificMemoFinish & IIf(IsArray(timesFinish), "", " (※工数未設定)"))
    Next n
End Sub

' --- 磨きとコーティング処理 (修正) ---
Private Sub AddPolishingAndCoating(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                                   needsPolishing As Boolean, hasCuttingEdge As Boolean, _
                                   needsOutsourcingForCoating As Boolean, coatingTypeKey As String) '★ coatingType を coatingTypeKey に変更
    Dim times As Variant
    Dim remarksFromSheetF As String
    Dim specificMemo As String
    Dim maeDandori As String, yTime As String, mTime As String, sTime As String

    If needsPolishing Then
        times = GetProcessTimes("磨き")
        If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3): remarksFromSheetF = CStr(times(4)) Else maeDandori = "": yTime = "0.5": mTime = "": sTime = "": remarksFromSheetF = "※工数/備考未設定"
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "磨き", , maeDandori, yTime, mTime, sTime, remarksFromSheetF)

        If hasCuttingEdge Then
            specificMemo = "上面"
            times = GetProcessTimes("平面研削 NC", "上面後")
            If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.2": mTime = "0.2": sTime = "0.1"
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "平面研削 NC", , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        End If
    End If

    If needsOutsourcingForCoating And coatingTypeKey <> "" Then
        Dim coatingSupplierName As String
        coatingSupplierName = GetOutsourcingSupplierName(coatingTypeKey) ' ★シートからコーティング業者名を取得
        If coatingSupplierName <> "" Then
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "外注", coatingSupplierName)
        Else
            Debug.Print "AddPolishingAndCoating Warning: Coating supplier not found for key '" & coatingTypeKey & "'"
            ' 必要であればフォールバック処理
        End If
    End If
End Sub





